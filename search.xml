<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git应用</title>
    <url>/2022/05/02/Git/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol>
<li><p>Git 是一个免费和开源的分布式版本控制系统，旨在以速度和效率处理从小型到大型项目的所有内容。可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper</p>
<span id="more"></span>
</li>
<li><p>Git易于学习， 占用空间小，性能快如闪电。它优于 SCM 工具，如 Subversion、CVS、Perforce 和 ClearCase，具有、方便和等功能。</p>
</li>
<li><p>分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的 修改了。</p>
</li>
</ol>
<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Git/1.png"></p>
<p>上图所展示的便是Git的核心，只有充分理解上图，才能很哈的使用Git这一工具。</p>
<p>主要分为四部分：</p>
<ul>
<li>远程仓库(GitHub, Gitee等托管平台)。</li>
<li>本地仓库：在自己的项目根目录，通过在Git bash中使用git init命令创建仓库。</li>
<li>暂存区：当我们的代码完成了一个阶段，我们想当前的这个版本在本地仓库进行保存一个版本，也就是commit操作，但是假如我们每次文件修改后都需要进行一次commit，会比较麻烦，所以Git给我们提供了一种方式，就是将修改的文件进行一次add操作，添加到暂存区中，在进行了一些add之后，统一进行commit操作。当然也可以直接每次add之后就进行commit。</li>
<li>工作区：我们在资源管理器里可以看到的文件就是我们的工作区</li>
</ul>
<p>上图中所展示的命令如下(下文也会说到)：</p>
<ol>
<li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li>
<li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li>
<li>add（添加）: 在提交前先将代码提交到暂存区</li>
<li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本 </li>
<li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li>
<li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于 fetch+merge </li>
<li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li>
</ol>
<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="1-配置用户信息"><a href="#1-配置用户信息" class="headerlink" title="1 配置用户信息"></a>1 配置用户信息</h2><p>在Git bash中输入以下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;邮箱地址&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-查看用户信息"><a href="#2-查看用户信息" class="headerlink" title="2 查看用户信息"></a>2 查看用户信息</h2><p>在Git bash中输入以下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure>

<p>也可以通过下面的命令直接查出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure>

<h2 id="3-为命令起别名"><a href="#3-为命令起别名" class="headerlink" title="3 为命令起别名"></a>3 为命令起别名</h2><ol>
<li><p>在用户目录创建.bashrc文件。</p>
</li>
<li><p>在此文件中添加别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> 别名=<span class="string">&#x27;原始命令&#x27;</span>				<span class="comment">#基本格式</span></span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line"><span class="built_in">alias</span> gitlog=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开Git bash，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4-处理中文乱码"><a href="#4-处理中文乱码" class="headerlink" title="4 处理中文乱码"></a>4 处理中文乱码</h2><ol>
<li><p>在Git bash中输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开Git安装命令，找到etc&#x2F;bash.bashrc 文件末尾添加以下信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line"><span class="built_in">export</span> LC_ALL=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="1-将文件添加至暂存区"><a href="#1-将文件添加至暂存区" class="headerlink" title="1 将文件添加至暂存区"></a>1 将文件添加至暂存区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add 文件名			<span class="comment">#将指定文件上传至暂存区</span></span><br><span class="line">git add .			  <span class="comment">#将工作区的所有文件上传至暂存区</span></span><br></pre></td></tr></table></figure>

<h2 id="2-将文件提交到本地仓库"><a href="#2-将文件提交到本地仓库" class="headerlink" title="2 将文件提交到本地仓库"></a>2 将文件提交到本地仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;XXXX&quot;</span>   </span><br><span class="line"><span class="comment">#将暂存区的所有文件提交到本地仓库其中 XXX 表示提交时，对此次操作的标记</span></span><br></pre></td></tr></table></figure>

<h2 id="3-查看文件状态"><a href="#3-查看文件状态" class="headerlink" title="3 查看文件状态"></a>3 查看文件状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status             <span class="comment">#查看文件现在所处的状态</span></span><br></pre></td></tr></table></figure>

<h2 id="4-查看日志"><a href="#4-查看日志" class="headerlink" title="4 查看日志"></a>4 查看日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -参数</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li>–all 显示所有分支 </li>
<li>–pretty&#x3D;oneline 将提交信息显示为一行 </li>
<li>–abbrev-commit 使得输出的commitId更简短 </li>
<li>–graph 以图的形式显示</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span>				<span class="comment">#所展示的内容很少，基本很少使用</span></span><br></pre></td></tr></table></figure>



<p>一般采用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git-log=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit</span></span><br></pre></td></tr></table></figure>

<p>但使用时较为复杂，我们可以为命令起别名。在基础配置中可以看到。</p>
<h2 id="5-版本回退"><a href="#5-版本回退" class="headerlink" title="5 版本回退"></a>5 版本回退</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard commit_id			<span class="comment">#commit_id通过查日志得等</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果提交记录被删除，不能获得commit_id。可以通过git reflog查询。</p>
</blockquote>
<h1 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>在我们的项目中，有许许多多的文件。但不是所有的文件(比如：java项目下的字节码文件，日志文件等等)我们都不需要上传至代码托管平台。对于这种文件，我们可以在工作目录中创建一个名为 .gitignore 的文件。列出要忽略的文件模式。</p>
<h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2 语法"></a>2 语法</h2><p>下面是几种常见的忽略格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.文件后缀名		   <span class="comment">#如: *.txt		  忽略所有以.txt为后缀的文件</span></span><br><span class="line">/目录名			 <span class="comment">#如: /temp		   忽略根目录下的temp目录</span></span><br><span class="line">目录名/			 <span class="comment">#如: temp/		   忽略temp目录下的所有文件</span></span><br><span class="line">目录名/*.文件后缀名	  <span class="comment">#如: temp/*.txt	忽略temp目录下的所有以txt后缀结尾的文件</span></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line">!文件名.文件后缀表	  <span class="comment">#常嵌套上的的格式使用。表示此文件除外。 如: *.txt  !test.txt   </span></span><br><span class="line">				   <span class="comment">#忽略所有以txt后缀结尾的文件，但test.txt除外</span></span><br></pre></td></tr></table></figure>



<h1 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h1><h2 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1 查看分支"></a>1 查看分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<h2 id="2-创建分支"><a href="#2-创建分支" class="headerlink" title="2 创建分支"></a>2 创建分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure>

<h2 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3 切换分支"></a>3 切换分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure>

<h2 id="4-创建并切换分支"><a href="#4-创建并切换分支" class="headerlink" title="4 创建并切换分支"></a>4 创建并切换分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure>

<h2 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4 合并分支"></a>4 合并分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure>

<h2 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5 删除分支"></a>5 删除分支</h2><blockquote>
<p>只能删除其他分支，不能删除当前分支 </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d 分支名	<span class="comment">#删除分支时，需要检查</span></span><br><span class="line">git branch -D 分支名	<span class="comment">#删除分支时，不做检查，强制删除。</span></span><br></pre></td></tr></table></figure>

<h2 id="6-解决冲突"><a href="#6-解决冲突" class="headerlink" title="6 解决冲突"></a>6 解决冲突</h2><p>当多个分支同时对同一个文件的同一个位置修改时，在合并分支时便会产生冲突。</p>
<p>解决方法：</p>
<ol>
<li>处理冲突产生的文件(分支的开发者讨论使用一个分支的内容)</li>
<li>重新上传。</li>
</ol>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="1-添加远程仓库"><a href="#1-添加远程仓库" class="headerlink" title="1 添加远程仓库"></a>1 添加远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add 远端名称 仓库路径</span><br></pre></td></tr></table></figure>

<ul>
<li>远端名称：默认是origin，可以自定义</li>
<li>仓库路径：从码云仓库主页获取</li>
</ul>
<h2 id="2-查看远程仓库"><a href="#2-查看远程仓库" class="headerlink" title="2 查看远程仓库"></a>2 查看远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>

<h2 id="3-推送到远程仓库"><a href="#3-推送到远程仓库" class="headerlink" title="3 推送到远程仓库"></a>3 推送到远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [-f] [--set-upstream] [[远端名称 [本地分支名][远端分支名]]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果远端分支名和本地分支名一样，则可以省略远端分支名</li>
<li>-f ：强制覆盖</li>
<li>–set-upstream ： 推送到远端的同时并且建立起和远端分支的关联关系。</li>
<li>如果当前分支已经和远端分支关联，则可以省略分支名和远端名。</li>
</ul>
<h2 id="4-查看本地远程关系"><a href="#4-查看本地远程关系" class="headerlink" title="4 查看本地远程关系"></a>4 查看本地远程关系</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>

<h2 id="5-从远程仓库克隆"><a href="#5-从远程仓库克隆" class="headerlink" title="5 从远程仓库克隆"></a>5 从远程仓库克隆</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 仓库路径 [本地目录]	<span class="comment">#本地目录可以省略，会自动生成本地目录</span></span><br></pre></td></tr></table></figure>

<h2 id="6-从远程仓库中抓取和拉取"><a href="#6-从远程仓库中抓取和拉取" class="headerlink" title="6 从远程仓库中抓取和拉取"></a>6 从远程仓库中抓取和拉取</h2><h3 id="1-抓取"><a href="#1-抓取" class="headerlink" title="1 抓取"></a>1 抓取</h3><p>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch [remote name] [branch name]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果不指定远端名称和分支名，则抓取所有分支。</li>
</ul>
<h3 id="2-拉取"><a href="#2-拉取" class="headerlink" title="2 拉取"></a>2 拉取</h3><p>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [remote name] [branch name]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li>
</ul>
<h2 id="7-解决合并冲突"><a href="#7-解决合并冲突" class="headerlink" title="7 解决合并冲突"></a>7 解决合并冲突</h2><p><strong>概述</strong>：在某一段时间内，有甲、乙两个人相继修改了同一个文件中的代码。此时就会出现合并冲突</p>
<p><strong>解决方法</strong>：甲先推送到远程仓库后，乙拉取到本地修改后再推送到远程仓库。</p>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>闲玩</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github搭建个人静态博客</title>
    <url>/2022/04/26/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h2><h3 id="1-1-安装Node-js"><a href="#1-1-安装Node-js" class="headerlink" title="1.1 安装Node.js"></a>1.1 安装Node.js</h3><ul>
<li><p><a href="https://nodejs.org/zh-cn/">Node.js</a>	Hexo是基于Node.js写的，所以需要安装Node.js。一路next即可</p>
<span id="more"></span></li>
</ul>
<h3 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2 安装Git"></a>1.2 安装Git</h3><ul>
<li><a href="https://git-scm.com/">Git</a>	部署时要用到Git。不使用Git部署可以不用安装。安装时也是一路next即可。</li>
</ul>
<h2 id="2-Github准备"><a href="#2-Github准备" class="headerlink" title="2 Github准备"></a>2 Github准备</h2><h3 id="2-1创建仓库"><a href="#2-1创建仓库" class="headerlink" title="2.1创建仓库"></a>2.1创建仓库</h3><p><em><strong>注意：</strong></em>仓库名为 <u>用户名.github.io</u></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/1.png"></p>
<h3 id="2-2-获取Token"><a href="#2-2-获取Token" class="headerlink" title="2.2 获取Token"></a>2.2 获取Token</h3><p>通过Setting -&gt; Developer settings -&gt; Personal access tokens到下图，然后点击Generate new token创建token</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/PicGo+Gitub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/2.png"></p>
<ul>
<li><p>Note就是此token的名称，可随便命名。</p>
</li>
<li><p>Expansion官方建议30天，到期再次申请。我怕麻烦，所以选的永久。</p>
</li>
<li><p>复选框的话，全选。避免以后出现什么问题，重复申请Token。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/PicGo+Gitub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/3.png"></p>
</li>
</ul>
<p>生成后复制保存好token，一会在站点配置时要用到。</p>
<h3 id="2-3-配置SSH"><a href="#2-3-配置SSH" class="headerlink" title="2.3 配置SSH"></a>2.3 配置SSH</h3><ol>
<li><p>桌面右键，点击git bash。</p>
<p> <img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/2.png"></p>
</li>
<li><p>依次输出以下命令</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global  user.name &quot;这里换上你的用户名&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>这个用户名可以随便定义，建议为你GitHub的用户名</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里的邮箱是注册GitHub的邮箱账户</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p> 到这边时，连续按三次回车。
 </p>
</li>
<li><p>打开系统盘下的用户目录下的.ssh文件夹下的id_rsa.pub文件，复制里面的内容</p>
</li>
</ol>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/3%EF%BC%81.png"></p>
<ol start="4">
<li>在Github中通过Setting-&gt;SSH and GPG keys路径，然后点击New SSH key，将复制的内容粘贴到Key中。</li>
</ol>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/4.png"></p>
<ul>
<li>Title是随便命名的。</li>
</ul>
<p>  点击Add SSH key即配置成功。  </p>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1 安装Hexo"></a>1 安装Hexo</h2><ol>
<li>右键git bash，输入以下命令，即可下载Hexo</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>通过下面的命令查看版本号，检验是否安装成功</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建博客项目</p>
</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init 博客项目的名称(自定义)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>初始化项目</li>
</ol>
<ul>
<li><p>先切换项目的根路径下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 博客项目的名称(自定义)</span><br></pre></td></tr></table></figure>


</li>
<li><p>下载相关组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>本地启动博客</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>浏览器访问 <a href="http://localhost:4000，出现下图见面，则成功">http://localhost:4000，出现下图见面，则成功</a></li>
</ol>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/5.png"></p>
<h2 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2 更换主题"></a>2 更换主题</h2><p>上图是默认主题，很丑对吧。在Hexo中有很多的主题供我们选择。我们可以访问<a href="https://hexo.io/themes/">Hexo</a>官网去选择自己喜欢的主题。</p>
<ol>
<li>下载复制到博客项目的themes路径下。在这我选择的是<a href="https://theme-next.js.org/">NexT</a>主题。</li>
</ol>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/6.png"><br>2. 将根目录下的config.yml中theme后面的内容改为自己下载的主题的名称。<br>    <img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/7.png"></p>
<p><em><strong>注意：</strong></em>每个主题的配置，都有对应的文档，请自行百度查找。</p>
<h1 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h1><h2 id="方法一：Git部署"><a href="#方法一：Git部署" class="headerlink" title="方法一：Git部署"></a>方法一：Git部署</h2><ol>
<li>安装hexo-deployer-git</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改项目根目录下的config.yml。在最后找到deploy，填写相关信息</li>
</ol>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/8.png"></p>
<ul>
<li>type: 方式就是git</li>
<li>reop: git@github@.com:用户名&#x2F;仓库名.git</li>
<li>branch: main</li>
<li>token: 前面创建的token，复制到这即可。</li>
</ul>
<ol start="3">
<li>执行下面命令，即可部署成功。</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h2 id="方式二：直接上传-十分麻烦，不推荐"><a href="#方式二：直接上传-十分麻烦，不推荐" class="headerlink" title="方式二：直接上传(十分麻烦，不推荐)"></a>方式二：直接上传(十分麻烦，不推荐)</h2><ol>
<li>执行下面命令</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将根目录下的public里的所有文件上传到仓库中。</li>
</ol>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/9.png"></p>
<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/0000.png"></p>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>创建</category>
      </categories>
      <tags>
        <tag>闲玩</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+Github搭建图床</title>
    <url>/2022/04/25/ImageBed/</url>
    <content><![CDATA[<h1 id="我为什么要搭建图床"><a href="#我为什么要搭建图床" class="headerlink" title="我为什么要搭建图床"></a>我为什么要搭建图床</h1><h2 id="1-认识图床"><a href="#1-认识图床" class="headerlink" title="1 认识图床"></a>1 认识图床</h2><p>图床简而言之就是用于储存图片的。</p>
<span id="more"></span>

<p>网站、APP的所有图片都是储存在服务器，然后获得图片地址，就能把图片显示出来。一个大的网站，或者发展久了，服务器就会储存非常多的图片，也是一笔不小的经费，加上每张图片都有访问的请求，都会被占用服务器的流量或cdn流量。所以就诞生了图床。</p>
<h2 id="2-我为什么要用PicGo-GitHub搭建图床"><a href="#2-我为什么要用PicGo-GitHub搭建图床" class="headerlink" title="2 我为什么要用PicGo+GitHub搭建图床"></a>2 我为什么要用PicGo+GitHub搭建图床</h2><ul>
<li><p>博客需要用图床，其实我对图床的依赖并不大，其次博客并不一定要用到图床。</p>
</li>
<li><p>GitHub免费，而且配置简单，使用优雅。最重要的是稳定。</p>
</li>
<li><p>支持Windows, macOS, Linux多平台，在不同平台都能使用</p>
</li>
</ul>
<p><strong>注意：</strong><em><strong>隐私性很差</strong></em>。搭建图床时，使用的是public仓库。也就是说，每一个人都能访问你的图床，查看你的上传的图片。但是对我而言，我上传的都是一些博客图片，本来就是给大家看的。所以，这一点对我来说不成问题。</p>
<h1 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h1><h2 id="1-配置Github"><a href="#1-配置Github" class="headerlink" title="1 配置Github"></a>1 配置Github</h2><h3 id="1-1新建仓库"><a href="#1-1新建仓库" class="headerlink" title="1.1新建仓库"></a>1.1新建仓库</h3><p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/PicGo+Gitub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/1.png"></p>
<p><strong>注意：</strong>一定要将仓库设置为public。因为后面使用图片时，算是外部访问，因此无法使用private仓库。</p>
<h3 id="1-2-获取token"><a href="#1-2-获取token" class="headerlink" title="1.2 获取token"></a>1.2 获取token</h3><p>通过Setting -&gt; Developer settings -&gt; Personal access tokens到下图，然后点击Generate new token创建token</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/PicGo+Gitub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/2.png"></p>
<p>Note就是此token的名称，可随便命名。</p>
<p>Expansion官方建议30天，到期再次申请。我怕麻烦，所以选的永久。</p>
<p>复选框的话，repo 一定要全选，其他的无所谓，我是都勾选了。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/PicGo+Gitub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/3.png"></p>
<p>生成后复制保存好token，一会在PicGo上还得用。</p>
<h2 id="2-配置PicGo"><a href="#2-配置PicGo" class="headerlink" title="2 配置PicGo"></a>2 配置PicGo</h2><p>2.1 <a href="https://github.com/Molunerfinn/PicGo">PicGo下载链接</a>下载安装打开。</p>
<p>2.2 找到图床设置中的Github图床。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/PicGo+Gitub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/4.png"></p>
<p>2.3 填入信息。</p>
<ul>
<li>设定仓库名：上文在 GitHub 创建的仓库。</li>
<li>设定分支名：main。</li>
<li>设定 Token：上文生成的 token。</li>
<li>指定存储路径：为空的话会上传到根目录，也可以指定路径。</li>
<li>设定自定义域名：可以为空，这里为了使用 CDN 加快图片的访问速度，按这样格式填写：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/用户名/仓库名</span><br></pre></td></tr></table></figure>

<p>2.4 至此，图床便搭建完成。</p>
<h1 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h1><h2 id="1-上传图片"><a href="#1-上传图片" class="headerlink" title="1 上传图片"></a>1 上传图片</h2><p>只需将要上传的图片拖拽到上传区，或者在上传区点击上传。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/PicGo+Gitub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/5.png"></p>
<h2 id="2-使用图片"><a href="#2-使用图片" class="headerlink" title="2 使用图片"></a>2 使用图片</h2><p>在相册中复制url即可，还可以选择自己要复制的格式。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/PicGo+Gitub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/6.png"></p>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>博客</category>
        <category>图床</category>
        <category>图床</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>闲玩</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2022/05/01/Markdown/</url>
    <content><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="1-标记语法："><a href="#1-标记语法：" class="headerlink" title="1. 标记语法："></a>1. 标记语法：</h2><p>Markdown共有六级标题。用 # 数量可快速标记。一个 # 是一级标题，两个 # 是二级标题，以此类推。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2-快捷键："><a href="#2-快捷键：" class="headerlink" title="2. 快捷键："></a>2. 快捷键：</h2><p>Ctrl+标题等级。如设置为一级标题，则为Ctrl+1。</p>
<p>标题等级提升降低：Ctrl+&#x3D; 和 Ctrl-&#x3D;</p>
<blockquote>
<p>若设置为普通段落，则为Ctrl+0  </p>
</blockquote>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1 无序列表"></a>1 无序列表</h2><h3 id="1-1-效果："><a href="#1-1-效果：" class="headerlink" title="1.1 效果："></a>1.1 效果：</h3><ul>
<li>第二排</li>
<li>第二排</li>
<li>第三排</li>
</ul>
<h3 id="1-2-标记语法"><a href="#1-2-标记语法" class="headerlink" title="1.2 标记语法"></a>1.2 标记语法</h3><p>一共有三种字符可以标记，* ，+  ，- 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种</span><br><span class="line">* 第二排</span><br><span class="line">* 第二排</span><br><span class="line">* 第三排</span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">- 第一排</span><br><span class="line">- 第二排</span><br><span class="line">- 第三排</span><br><span class="line"></span><br><span class="line">第三种</span><br><span class="line">+ 第一排</span><br><span class="line">+ 第二排</span><br><span class="line">+ 第三排</span><br></pre></td></tr></table></figure>

<h3 id="1-3-快捷键"><a href="#1-3-快捷键" class="headerlink" title="1.3 快捷键"></a>1.3 快捷键</h3><p>Ctrl + Shift + ]</p>
<h2 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2 有序列表"></a>2 有序列表</h2><h3 id="2-1-效果"><a href="#2-1-效果" class="headerlink" title="2.1 效果"></a>2.1 效果</h3><ol>
<li>第一行 </li>
<li>第二行</li>
</ol>
<h3 id="2-2-标记语法"><a href="#2-2-标记语法" class="headerlink" title="2.2 标记语法"></a>2.2 标记语法</h3><p>相比于无序列表来说。有序的字符标记语法较少，只有一种。数字+. 然后空格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一行 </span><br><span class="line">2. 第二行</span><br></pre></td></tr></table></figure>

<h3 id="2-3-快捷键"><a href="#2-3-快捷键" class="headerlink" title="2.3 快捷键"></a>2.3 快捷键</h3><p>Ctrl + Shift + [</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="1-效果"><a href="#1-效果" class="headerlink" title="1 效果"></a>1 效果</h2><ol>
<li><p>非嵌套：</p>
<blockquote>
<p>子曰：上午不睡，下午崩溃！</p>
</blockquote>
</li>
<li><p>嵌套：</p>
<blockquote>
<p>孔子曰：上午不睡，下午崩溃！</p>
<blockquote>
<p>子曰：上午不睡，下午崩溃！</p>
<blockquote>
<p>曰：上午不睡，下午崩溃！</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<h2 id="2-标记语法"><a href="#2-标记语法" class="headerlink" title="2 标记语法"></a>2 标记语法</h2><ol>
<li><p>非嵌套</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 子曰：上午不睡，下午崩溃！</span><br></pre></td></tr></table></figure>
</li>
<li><p>嵌套：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 孔子曰：上午不睡，下午崩溃！</span><br><span class="line">&gt; &gt; 子曰：上午不睡，下午崩溃！</span><br><span class="line">&gt; &gt; &gt; 曰：上午不睡，下午崩溃！</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3 快捷键"></a>3 快捷键</h2><p>Ctrl  + Shift + Q</p>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="1-效果-1"><a href="#1-效果-1" class="headerlink" title="1 效果"></a>1 效果</h2><ol>
<li><p>代码片</p>
<p><code>System.out.print(&quot;hello world&quot;);</code></p>
</li>
<li><p>代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-标记语法-1"><a href="#2-标记语法-1" class="headerlink" title="2 标记语法"></a>2 标记语法</h2><ol>
<li><p>代码片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`System.out.print(&quot;hello world&quot;)`</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``` 然后回车，再输入System.out.print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在(&#96;&#96;&#96;)后可以接上语言类型，让代码块的关键字高亮</p>
</blockquote>
</li>
</ol>
<h2 id="3-快捷键-1"><a href="#3-快捷键-1" class="headerlink" title="3 快捷键"></a>3 快捷键</h2><ol>
<li>代码片：Ctrl + Shift + &#96;</li>
<li>代码块：无</li>
</ol>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><h2 id="1-效果-2"><a href="#1-效果-2" class="headerlink" title="1 效果"></a>1 效果</h2><p><a href="http://wian.tk/">本站地址</a></p>
<h2 id="2-标记语法-2"><a href="#2-标记语法-2" class="headerlink" title="2 标记语法"></a>2 标记语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[本站地址](http://wian.tk)</span><br></pre></td></tr></table></figure>

<h2 id="3-快捷键-2"><a href="#3-快捷键-2" class="headerlink" title="3 快捷键"></a>3 快捷键</h2><p>Ctrl + K</p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="1-效果-3"><a href="#1-效果-3" class="headerlink" title="1 效果"></a>1 效果</h2><p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/Avatar/avatar.jpg" alt="这是一张图片"></p>
<h2 id="2-标记语法-3"><a href="#2-标记语法-3" class="headerlink" title="2 标记语法"></a>2 标记语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![这是一张图片](https://cdn.jsdelivr.net/gh/WianAn/imageBed/Avatar/avatar.jpg)</span><br></pre></td></tr></table></figure>

<ul>
<li>[]中输入图片的标记</li>
<li>()中输入图片地址，可以是url，也可以使本地地址。</li>
</ul>
<h2 id="3-快捷键-3"><a href="#3-快捷键-3" class="headerlink" title="3 快捷键"></a>3 快捷键</h2><p>Ctrl + Shift + I</p>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h2 id="1-效果-4"><a href="#1-效果-4" class="headerlink" title="1 效果"></a>1 效果</h2><p><em>斜体文本</em>	<em>斜体文本</em></p>
<p><strong>粗体文本</strong>	<strong>粗体文本</strong></p>
<p><em><strong>粗斜体文本</strong></em>	<em><strong>粗斜体文本</strong></em></p>
<h2 id="2-标记语法-4"><a href="#2-标记语法-4" class="headerlink" title="2 标记语法"></a>2 标记语法</h2><p>有两种标记字符 * 和 _	</p>
<p>用法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure>

<h2 id="3-快捷键-4"><a href="#3-快捷键-4" class="headerlink" title="3 快捷键"></a>3 快捷键</h2><ul>
<li>斜体：Ctrl + I</li>
<li>加粗：Ctrl + B</li>
</ul>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="1-效果-5"><a href="#1-效果-5" class="headerlink" title="1 效果"></a>1 效果</h2><table>
<thead>
<tr>
<th>标题1</th>
<th>标题1</th>
<th>标题1</th>
</tr>
</thead>
<tbody><tr>
<td>单元格1</td>
<td>单元格2</td>
<td>单元格3</td>
</tr>
</tbody></table>
<h2 id="2-标记语法-5"><a href="#2-标记语法-5" class="headerlink" title="2 标记语法"></a>2 标记语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 标题1 | 标题2 | 标题3 |</span><br><span class="line">| ---- | ---- | ---- |</span><br><span class="line">| 单元格1 | 单元格2 | 单元格3|</span><br></pre></td></tr></table></figure>

<h2 id="3-快捷键-5"><a href="#3-快捷键-5" class="headerlink" title="3 快捷键"></a>3 快捷键</h2><p>Ctrl + T</p>
<h2 id="4-注意"><a href="#4-注意" class="headerlink" title="4 注意"></a>4 注意</h2><ul>
<li>增加行：Ctrl + enter</li>
<li>删除行：Ctrl + Shift + backspace(删除键)</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="1-删除线"><a href="#1-删除线" class="headerlink" title="1 删除线"></a>1 删除线</h2><h3 id="1-1-效果"><a href="#1-1-效果" class="headerlink" title="1.1 效果"></a>1.1 效果</h3><p><del>删除线</del></p>
<h3 id="1-2-标记语法-1"><a href="#1-2-标记语法-1" class="headerlink" title="1.2 标记语法"></a>1.2 标记语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~被删除内容~~</span><br></pre></td></tr></table></figure>

<h3 id="1-3-快捷键-1"><a href="#1-3-快捷键-1" class="headerlink" title="1.3 快捷键"></a>1.3 快捷键</h3><p>Alt + Shift + 5</p>
<h2 id="2-下划线"><a href="#2-下划线" class="headerlink" title="2 下划线"></a>2 下划线</h2><h3 id="2-1-效果-1"><a href="#2-1-效果-1" class="headerlink" title="2.1 效果"></a>2.1 效果</h3><p><u>下划线</u></p>
<h3 id="2-2-标记语法-1"><a href="#2-2-标记语法-1" class="headerlink" title="2.2 标记语法"></a>2.2 标记语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-快捷键-1"><a href="#2-3-快捷键-1" class="headerlink" title="2.3 快捷键"></a>2.3 快捷键</h3><p>Ctrl + U</p>
<h2 id="3-分割线"><a href="#3-分割线" class="headerlink" title="3 分割线"></a>3 分割线</h2><h3 id="3-1-效果"><a href="#3-1-效果" class="headerlink" title="3.1 效果"></a>3.1 效果</h3><p>下面是下划线</p>
<hr>
<hr>
<h3 id="3-2-标记语法"><a href="#3-2-标记语法" class="headerlink" title="3.2 标记语法"></a>3.2 标记语法</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure>

<h3 id="3-3快捷键"><a href="#3-3快捷键" class="headerlink" title="3.3快捷键"></a>3.3快捷键</h3><p>无</p>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>闲玩</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven基础应用</title>
    <url>/2022/05/04/Maven%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>背景：我们在做项目时。一个项目中常常有许多的不同种类的文件，难以管理。在多人开发一个项目时，每个人的项目结构也不一样，对于后期的整合也是一个大问题。在我们开发时，会用到许多的依赖，那么对于依赖的导入和管理也是一个棘手的问题。在这样的背景下，出现了许多的项目管理工具。现在常用的便是Maven。</p>
<span id="more"></span>

<p>Maven：由背景我们就能知道Maven是一个项目管理工具。</p>
<h2 id="2-作用"><a href="#2-作用" class="headerlink" title="2 作用"></a>2 作用</h2><ul>
<li>项目构建：提供骨架，便于开发者统一项目结构，便于开发。</li>
<li>依赖管理：Maven能够方便快捷的管理依赖。</li>
<li>提供标准：开发者都Maven，久而言之。Maven便提供了标准的项目结构。</li>
</ul>
<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1 仓库"></a>1 仓库</h2><p>仓库就是装东西的。在Maven中，我们要仓库有什么用？仓库在哪里？</p>
<p>在背景中已经提到，Maven可以管理依赖。所以能够猜测出仓库就是用来存放依赖。</p>
<p>仓库的分类：</p>
<ol>
<li><p>远程仓库：非本机上存储依赖的仓库。连接本地仓库，为本地仓库提供依赖。</p>
<p>分类：</p>
<ol>
<li>中央仓库：由Maven开发人员管理和维护，里面拥有绝大部分的开源依赖</li>
<li>私服：由企业或个人创建的远程仓库。从中央仓库获取依赖，或者自己上传依赖。</li>
</ol>
</li>
<li><p>本地仓库：本机上用于存储依赖的仓库。</p>
</li>
</ol>
<blockquote>
<ol>
<li>私服用来存储自己研发的依赖，保护自己的版权。</li>
<li>用于团队直接互相传递自己研发的依赖。</li>
</ol>
</blockquote>
<p>下图为仓库的工作流程图。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Maven/0000.png"></p>
<p>本地仓库获取依赖由三种方法：</p>
<ol>
<li>从私服中获取，私服的服务器一般在国内，获取依赖的速度快。</li>
<li>直接从中央仓库中获取。但是中央仓库的服务器在国外，获取速度很慢，不推荐使用此方法。</li>
<li>自己导入，下载对于的依赖后，手动添加到对于的文件目录下。</li>
</ol>
<h2 id="2-坐标"><a href="#2-坐标" class="headerlink" title="2 坐标"></a>2 坐标</h2><p>坐标就要用来确定位置的。那么在Maven中哪里要用到坐标呢？坐标的出现是为了精确地找到对应的物品。在仓库中，存在着众多的依赖。找起来是十分麻烦。所有就用坐标来定位我们需要的依赖。</p>
<p>Maven坐标的组成部分：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中各参数为：</p>
<ul>
<li>groupId：定义当前Maven隶属组织名称(通常情况下为域名 反写，如：com.mybatis)</li>
<li>artifactId：定义当前Maven项目的名称(通常是模块名称，如CRM，SMS)</li>
<li>version：定义当前版本的版本号</li>
<li>packaging：定义当前项目的打包方式(如：jar，war)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mvn compile			#编译</span><br><span class="line">mvn clean			#清理</span><br><span class="line">mvn test			#测试</span><br><span class="line">mvn package			#打包</span><br><span class="line">mvn install			#安装到本地仓库</span><br></pre></td></tr></table></figure>



<h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><h2 id="1-依赖传递"><a href="#1-依赖传递" class="headerlink" title="1 依赖传递"></a>1 依赖传递</h2><p>分类：</p>
<ul>
<li>直接依赖：当前依赖中通过依赖配置建立的依赖关系</li>
<li>间接依赖：被依赖的依赖包如果依赖其他的依赖包，那么当前项目就间接依赖其他依赖包。</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Maven/1.png"></p>
<p>如图：</p>
<ul>
<li>test2.jar对于test1.jar就是直接依赖</li>
<li>test3.jar对于test1.jar就是间接依赖</li>
</ul>
<h2 id="2-可选依赖"><a href="#2-可选依赖" class="headerlink" title="2 可选依赖"></a>2 可选依赖</h2><p>可选依赖：对外隐藏自己所依赖的依赖包</p>
<ul>
<li>只需在添加依赖时，添加<code>&lt;optional&gt;true&lt;/optional&gt;</code></li>
<li>optional的默认值为false，即不隐藏自己所依赖的jar包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-排除依赖"><a href="#3-排除依赖" class="headerlink" title="3 排除依赖"></a>3 排除依赖</h2><p>排除依赖：主动断开依赖的资源，被排除的资源无需指定版本</p>
<ul>
<li>在直接依赖下面添加<code>exclusions</code>标签</li>
<li>如下：在test1中导图test2依赖，但是要断开test3依赖</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Maven/1.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 此为test1项目的pom.xml文件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.wian<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">versoio</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">versoio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.wian<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-依赖范围"><a href="#4-依赖范围" class="headerlink" title="4 依赖范围"></a>4 依赖范围</h2><ul>
<li><p>依赖的jar默认情况下是compile，即任何地方都能使用。但是在实际开发中并不是所有的依赖在所有的地方都有使用。</p>
</li>
<li><p>通过scope标签设定依赖的作用范围</p>
</li>
<li><p>作用范围</p>
<ul>
<li><p>全部范围有效</p>
</li>
<li><p>主程序范围有效(main文件范围内)</p>
</li>
<li><p>测试程序范围有效(test文件范围内)</p>
</li>
<li><p>是否参与打包(package指令范围内)</p>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>scope</th>
<th>主代码</th>
<th>测试代码</th>
<th>打包</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>test</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>provided</td>
<td>Y</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>runtime</td>
<td></td>
<td></td>
<td>Y</td>
</tr>
</tbody></table>
<ul>
<li>依赖范围的传递性：只有能够参与打包的依赖才能传递</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>compile</th>
<th>test</th>
<th>provided</th>
<th>runtime</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>compile</td>
<td>test</td>
<td>provided</td>
<td>runtime</td>
</tr>
<tr>
<td>test</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>provided</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>runtime</td>
<td>runtime</td>
<td>test</td>
<td>provided</td>
<td>runtime</td>
</tr>
</tbody></table>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>生命周期注意分为三类：</p>
<ul>
<li>clean</li>
<li>default</li>
<li>site</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Maven/2.png"></p>
<ol>
<li><p><strong>default周期(重点)：</strong></p>
<ul>
<li>compile			  编译项目的源代码</li>
<li>test                      使用合适的单元测试框架运行测试(junit便是其一)</li>
<li>package              将编译后的代码打包。格式为jar，war等</li>
<li>install                  安装项目包到本地仓库，可以作为本地项目的依赖</li>
</ul>
<blockquote>
<p>该周期有很多，只说明了其中的常用几个。</p>
</blockquote>
</li>
<li><p>clean周期：</p>
<ul>
<li><p>pre-clean			执行一些需要在clean之前完成的工作</p>
</li>
<li><p>clean                   移除所有上一次构建生成的文件</p>
</li>
<li><p>post-clean          执行一些需要在clean之后立刻完成的工作</p>
</li>
</ul>
</li>
<li><p>site周期：</p>
<ul>
<li><p>pre-site			   执行一些需要在站点生成文档之前的工作</p>
</li>
<li><p>site                      生成项目所需要的站点文档</p>
</li>
<li><p>post-site             执行一些需要在生成站点文档之后完成的工作，并为部署做准备</p>
</li>
<li><p>site-deploy         将生成的站点文档部署到特定的服务器上</p>
</li>
</ul>
</li>
</ol>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ul>
<li>插件与生命周期内的阶段绑定，在执行到对应的生命周期时执行对应的插件</li>
<li>默认Maven在各个生命周期上绑定有预设的功能</li>
<li>通过插件可以自定义其他功能</li>
</ul>
<p>导入插件格式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bulid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bulid</span>&gt;</span></span><br></pre></td></tr></table></figure>



<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>工具</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础知识</title>
    <url>/2022/04/28/MySQL/</url>
    <content><![CDATA[<h1 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h1><ul>
<li>Sql语句可以单行或者多行书写，但是必须以分号结束。只有以分号结束才是一个完整的Sql语句。</li>
<li>Mysql数据库的语句不区分大小写，关键字建议大写，便于区分。</li>
<li>注释：<ul>
<li>单行注释：- - 或者#</li>
<li>多行注释：&#x2F;* 被注释内容*&#x2F;</li>
</ul>
</li>
</ul>
<span id="more"></span>



<h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><p>DDL(Data Definition Language) ： 数据定义语言，用来定义数据库对象：数据库，表，列等</p>
<p>DDL简单理解就是用来操作数据库，表等</p>
<h2 id="1-操作数据库"><a href="#1-操作数据库" class="headerlink" title="1 操作数据库"></a>1 操作数据库</h2><h3 id="1-1-查询所有的数据库"><a href="#1-1-查询所有的数据库" class="headerlink" title="1.1 查询所有的数据库"></a>1.1 查询所有的数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-创建数据库"><a href="#1-2-创建数据库" class="headerlink" title="1.2 创建数据库"></a>1.2 创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-删除数据库"><a href="#1-3-删除数据库" class="headerlink" title="1.3 删除数据库"></a>1.3 删除数据库</h3><ul>
<li><p>知道存在，直接删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不知道是否存在，添加判断语句。若存在，则删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-使用数据库"><a href="#1-4-使用数据库" class="headerlink" title="1.4 使用数据库"></a>1.4 使用数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE 数据库名称;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-查看当前数据库"><a href="#1-5-查看当前数据库" class="headerlink" title="1.5 查看当前数据库"></a>1.5 查看当前数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure>

<h2 id="2-操作表"><a href="#2-操作表" class="headerlink" title="2 操作表"></a>2 操作表</h2><h3 id="2-1-查询当前数据库下所有的表"><a href="#2-1-查询当前数据库下所有的表" class="headerlink" title="2.1 查询当前数据库下所有的表"></a>2.1 查询当前数据库下所有的表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-查询表结构"><a href="#2-2-查询表结构" class="headerlink" title="2.2 查询表结构"></a>2.2 查询表结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名称;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-创建表"><a href="#2-3-创建表" class="headerlink" title="2.3 创建表"></a>2.3 创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (</span><br><span class="line">	字段名<span class="number">1</span>	数据类型<span class="number">1</span>,</span><br><span class="line">	字段名<span class="number">1</span>	数据类型<span class="number">1</span>,</span><br><span class="line">	...</span><br><span class="line">	字段名n	数据类型n</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="2-4-删除表："><a href="#2-4-删除表：" class="headerlink" title="2.4 删除表："></a>2.4 删除表：</h3><ul>
<li><p>知道存在，直接删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不知道是否存在，添加判断语句。若存在，则删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-5-修改表："><a href="#2-5-修改表：" class="headerlink" title="2.5 修改表："></a>2.5 修改表：</h3><h4 id="2-5-1-修改表名"><a href="#2-5-1-修改表名" class="headerlink" title="2.5.1 修改表名"></a>2.5.1 修改表名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-2-添加列："><a href="#2-5-2-添加列：" class="headerlink" title="2.5.2 添加列："></a>2.5.2 添加列：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 添加的列名 添加的列的数据类型;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-3-修改列的数据类型"><a href="#2-5-3-修改列的数据类型" class="headerlink" title="2.5.3 修改列的数据类型"></a>2.5.3 修改列的数据类型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>　表名　MODIFY　列名　新的数据类型;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-4-同时修改列名和数据类型"><a href="#2-5-4-同时修改列名和数据类型" class="headerlink" title="2.5.4 同时修改列名和数据类型"></a>2.5.4 同时修改列名和数据类型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>　表名　列名　新的数据类型;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-5-删除列"><a href="#2-5-5-删除列" class="headerlink" title="2.5.5 删除列"></a>2.5.5 删除列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>　表名　<span class="keyword">DROP</span>　列名;</span><br></pre></td></tr></table></figure>

<p>​			</p>
<h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p>DML(Data Manipulation Language) 数据操作语言，用来对数据库中表的数据进行增删改</p>
<p>DML简单理解就对表中数据进行增删改</p>
<h2 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1 添加数据"></a>1 添加数据</h2><h3 id="1-1-给指定列添加数据"><a href="#1-1-给指定列添加数据" class="headerlink" title="1.1 给指定列添加数据"></a>1.1 给指定列添加数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2.</span>..) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2.</span>..);</span><br></pre></td></tr></table></figure>

<h3 id="1-2-给全部列添加数据"><a href="#1-2-给全部列添加数据" class="headerlink" title="1.2 给全部列添加数据"></a>1.2 给全部列添加数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2.</span>..);</span><br></pre></td></tr></table></figure>

<h3 id="1-3-批量添加数据"><a href="#1-3-批量添加数据" class="headerlink" title="1.3 批量添加数据"></a>1.3 批量添加数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2.</span>..) </span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">		(值<span class="number">1</span>,值<span class="number">2.</span>..),</span><br><span class="line">		(值<span class="number">1</span>,值<span class="number">2.</span>..),</span><br><span class="line">		(值<span class="number">1</span>,值<span class="number">2.</span>..),</span><br><span class="line">		...</span><br><span class="line">		(值<span class="number">1</span>,值<span class="number">2.</span>..);</span><br></pre></td></tr></table></figure>

<h2 id="2-修改数据"><a href="#2-修改数据" class="headerlink" title="2 修改数据"></a>2 修改数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>, 列名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>, ... [<span class="keyword">WHERE</span> 条件]</span><br></pre></td></tr></table></figure>

<h2 id="3-删除数据："><a href="#3-删除数据：" class="headerlink" title="3 删除数据："></a>3 删除数据：</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件]</span><br></pre></td></tr></table></figure>



<h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><p>DQL(Data Query Language) 数据查询语言，用来查询数据库中表的记录(数据)</p>
<p>DQL简单理解就是对数据进行查询操作。从数据库表中查询到我们想要的数据。</p>
<h2 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1 基础查询"></a>1 基础查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名; <span class="comment">--查询所有数据(*为所有字段)</span></span><br></pre></td></tr></table></figure>

<h2 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2 条件查询"></a>2 条件查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>下面为条件查询能够使用的运算符。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于</td>
</tr>
<tr>
<td>&#x3D;</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;或者!&#x3D;</td>
<td>不等于</td>
</tr>
<tr>
<td>BETWEEN…AND…</td>
<td>在某个范围之间(前后都包含)</td>
</tr>
<tr>
<td>IN(…)</td>
<td>多选一 满足其中一个即可</td>
</tr>
<tr>
<td>LIKE占位符</td>
<td>模糊查询 _单个任意字符 %多个任意字符</td>
</tr>
<tr>
<td>IS NULL</td>
<td>是NULL</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>不是NULL</td>
</tr>
<tr>
<td>AND或&amp;&amp;</td>
<td>并且</td>
</tr>
<tr>
<td>OR或||</td>
<td>或者</td>
</tr>
<tr>
<td>NOT或！</td>
<td>非，不是</td>
</tr>
</tbody></table>
</li>
<li><p>模糊查询：就是查询只知道部分信息来查数据</p>
</li>
</ul>
<h2 id="3-排序查询"><a href="#3-排序查询" class="headerlink" title="3 排序查询"></a>3 排序查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段名<span class="number">1</span> [排序方式],排序字段名<span class="number">2</span> [排序方式]...;</span><br></pre></td></tr></table></figure>

<p>排序方式有两种：</p>
<ul>
<li>ASC：升序排列 (默认值)</li>
<li>DESC：降序排列</li>
</ul>
<p>注意：如果有多个排序条件，当前面的条件值一样时，才会根据第二条件进行排序。</p>
<h2 id="4-聚合函数"><a href="#4-聚合函数" class="headerlink" title="4 聚合函数"></a>4 聚合函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数名(列名) <span class="keyword">FROM</span> 表;</span><br></pre></td></tr></table></figure>

<p>函数分类：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count(列名)</td>
<td>统计数量（一般选用不为null的列）</td>
</tr>
<tr>
<td>max(列名)</td>
<td>最大值</td>
</tr>
<tr>
<td>min(列名)</td>
<td>最小值</td>
</tr>
<tr>
<td>sum(列名)</td>
<td>求和</td>
</tr>
<tr>
<td>avg(列名)</td>
<td>平均值</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：NULL值不参与所有聚合函数运算！！！</p>
</blockquote>
<h2 id="5-分组查询"><a href="#5-分组查询" class="headerlink" title="5 分组查询"></a>5 分组查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 分组前的限定条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span> 分组后过滤条件]</span><br></pre></td></tr></table></figure>

<p><strong>WHERE和HAVING的区别：</strong></p>
<ul>
<li>执行时机不一样：where 是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤。</li>
<li>可判断的条件不一样：where 不能对聚合函数进行判断，having 可以。</li>
</ul>
<blockquote>
<p>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</p>
</blockquote>
<h2 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6 分页查询"></a>6 分页查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 其实索引, 查询台条目数;</span><br></pre></td></tr></table></figure>

<p>索引计算公式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">起始索引 <span class="operator">=</span> (当前页码 <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> 每页显示的条数</span><br></pre></td></tr></table></figure>



<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="1-非外键约束"><a href="#1-非外键约束" class="headerlink" title="1 非外键约束"></a>1 非外键约束</h2><table>
<thead>
<tr>
<th>约束名称</th>
<th align="left">描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>主键约束</td>
<td align="left">主键是一行数据的唯一标识，要求非空且唯一</td>
<td>PRIMARY KEY</td>
</tr>
<tr>
<td>唯一约束</td>
<td align="left">保证列中的所有数据各不相同</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>非空约束</td>
<td align="left">保证列中所有数据不能有NULL值</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>默认约束</td>
<td align="left">保存数据时，未指定值则采用默认值</td>
<td>DEFAULT</td>
</tr>
</tbody></table>
<h2 id="2-外键约束"><a href="#2-外键约束" class="headerlink" title="2 外键约束"></a>2 外键约束</h2><ul>
<li><p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p>
<table>
<thead>
<tr>
<th>外键约束</th>
<th>外键是用来让两个表之间建立连接，保证数据的一致性和完整性</th>
<th align="center">FOREIGN KEY</th>
</tr>
</thead>
</table>
</li>
<li><p>添加约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加外键约束</span></span><br><span class="line"><span class="keyword">CREATE</span>　<span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span>] [外键名] <span class="keyword">FOREIGN</span> KEY(外键列名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 创建表后添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span>　<span class="keyword">TABLE</span>　表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span>(外键列名) <span class="keyword">REFERENCES</span> 主表(主表名称);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="1-一对一"><a href="#1-一对一" class="headerlink" title="1 一对一"></a>1 一对一</h2><ul>
<li><p>一对一关系多用于表拆分，将一个实体中经常出现的字段放一张表，不经常出现的字段放一张表。用于调高查询性能。</p>
</li>
<li><p>实现方法：在任意一方加入外键，关联另一方主键，并且设置外键为唯一约束(UNIQUE)。</p>
</li>
<li><p>例子：下图就是一对一的例子，我在tb_user_desc表中添加了一个外键。</p>
<center>tb_user用户表 (1)</center>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>sex</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>33</td>
<td>男</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>56</td>
<td>女</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td>34</td>
<td>男</td>
</tr>
</tbody></table>
<center>tb_user_desc (1)</center>

<table>
<thead>
<tr>
<th>id</th>
<th>adder</th>
<th>status</th>
<th>user_id(添加的外键)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>四川</td>
<td>单身</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>上海</td>
<td>离婚</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>广东</td>
<td>已婚</td>
<td>3</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="2-多对一"><a href="#2-多对一" class="headerlink" title="2 多对一"></a>2 多对一</h2><ul>
<li><p>一个表的某一行数据对应这另一张表的多行数据。</p>
</li>
<li><p>实现方法：在多的一方建立外键，指向一的一方。</p>
</li>
<li><p>例子：一个部门对应多个员工，一个员工对应一个部门。我在tb_emp表中建立外键，指向tb_dept表。</p>
<center>tb_emp (m)</center>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>dept_id(添加的外键)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>23</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>54</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td>34</td>
<td>2</td>
</tr>
</tbody></table>
<center>tb_dept (1)</center>

<table>
<thead>
<tr>
<th>dept_id</th>
<th>dept_name</th>
<th>adder</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>研发部</td>
<td>北京</td>
</tr>
<tr>
<td>2</td>
<td>销售部</td>
<td>成都</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="3-多对多"><a href="#3-多对多" class="headerlink" title="3 多对多"></a>3 多对多</h2><ul>
<li><p>两张表互相有多行数据有关联。</p>
</li>
<li><p>实现方法：建立第三只张<strong>中间表</strong>，中间至少包含<strong>两个外键</strong>，分别是关<strong>联的是两张表的主键</strong>。</p>
</li>
<li><p>例子：书包和书的种类便是多对多，一个书包可以装不同种类的书。一种书可以装进不同的书包。我创建了第三张表，包含两个外键，分别指向tb_bag和tb_book的主键。</p>
<center>tb_bag (m)</center>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>甲</td>
</tr>
<tr>
<td>2</td>
<td>乙</td>
</tr>
</tbody></table>
<center>tb_book (n)</center>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>语文</td>
</tr>
<tr>
<td>2</td>
<td>数学</td>
</tr>
<tr>
<td>3</td>
<td>英语</td>
</tr>
</tbody></table>
<center>tb_book_bag (创建的第三张中间表)</center>

<table>
<thead>
<tr>
<th>id</th>
<th>tb_bag</th>
<th>tb_book</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>3</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="1-连接查询"><a href="#1-连接查询" class="headerlink" title="1 连接查询"></a>1 连接查询</h2><h3 id="1-1-内连接"><a href="#1-1-内连接" class="headerlink" title="1.1 内连接"></a>1.1 内连接</h3><p>查两张表的交集部分。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名<span class="number">1</span>,表名<span class="number">2</span>,... <span class="keyword">WHERE</span> 条件; </span><br><span class="line"><span class="comment">-- 显示类链接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名<span class="number">1</span> <span class="keyword">FROM</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表名<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-外连接"><a href="#1-2-外连接" class="headerlink" title="1.2 外连接"></a>1.2 外连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>

<ul>
<li>左外连接：相当于查询表1所有数据和交集部分数据。</li>
<li>右外连接：相当于查询表2所有数据和交集部分数据。</li>
</ul>
<h2 id="2-子查询"><a href="#2-子查询" class="headerlink" title="2 子查询"></a>2 子查询</h2><p>子查询就是查询中嵌套查询。</p>
<h3 id="2-1-单行单列"><a href="#2-1-单行单列" class="headerlink" title="2.1 单行单列"></a>2.1 单行单列</h3><ul>
<li>作为条件值，使用 &#x3D; , !&#x3D; , &gt; ,  &lt;等进行判断。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 字段名 <span class="operator">=</span> (子查询);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-多行单列"><a href="#2-2-多行单列" class="headerlink" title="2.2 多行单列"></a>2.2 多行单列</h3><ul>
<li>作为条件值，使用in等关键字进行条件判断。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 字段名 <span class="keyword">IN</span> (子查询);</span><br></pre></td></tr></table></figure>

<h3 id="2-3-多行多列"><a href="#2-3-多行多列" class="headerlink" title="2.3 多行多列"></a>2.3 多行多列</h3><ul>
<li>作为虚拟表。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> (子查询) <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>



<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="1-四大特性"><a href="#1-四大特性" class="headerlink" title="1 四大特性"></a>1 四大特性</h2><ul>
<li>原子性：事务是不可分割的最小操作单元，要么同时成功，要么同时失败。</li>
<li>一致性：事务完成时，必须使所以的数据都保持一致状态。</li>
<li>隔离性：多个事务之间，操作的可见性。</li>
<li>持久行：事务一旦提交或回滚，它对数据的改变是永久的。</li>
</ul>
<h2 id="2-使用-常用"><a href="#2-使用-常用" class="headerlink" title="2 使用(常用)"></a>2 使用(常用)</h2><h3 id="2-1-开启事务"><a href="#2-1-开启事务" class="headerlink" title="2.1 开启事务"></a>2.1 开启事务</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION; 或 <span class="keyword">BEGIN</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-提交事务"><a href="#2-2-提交事务" class="headerlink" title="2.2 提交事务"></a>2.2 提交事务</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure>

<p>COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的.</p>
<h3 id="2-3-回滚事务"><a href="#2-3-回滚事务" class="headerlink" title="2.3 回滚事务"></a>2.3 回滚事务</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>

<p>回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。</p>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis知识点</title>
    <url>/2022/05/10/mybatis%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>下面的例子以下面两张表为例：</p>
<center>tb_company</center>

<table>
<thead>
<tr>
<th>company_id</th>
<th>company_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>华为</td>
</tr>
<tr>
<td>2</td>
<td>小米</td>
</tr>
<tr>
<td>3</td>
<td>oppo</td>
</tr>
</tbody></table>
<span id="more"></span>


<center>tb_user</center>

<table>
<thead>
<tr>
<th>id</th>
<th>username</th>
<th>password</th>
<th>age</th>
<th>c_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>123</td>
<td>22</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>456</td>
<td>44</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td>789</td>
<td>33</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>赵六</td>
<td>012</td>
<td>21</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>陈七</td>
<td>345</td>
<td>33</td>
<td>1</td>
</tr>
</tbody></table>
<p>实体类的属性为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//User(tb_user)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer cId;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"><span class="comment">//Company(tb_company)</span></span><br><span class="line">	<span class="keyword">private</span> String companyId;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; UserList;</span><br></pre></td></tr></table></figure>



<h1 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h1><h2 id="1-级联方式"><a href="#1-级联方式" class="headerlink" title="1 级联方式"></a>1 级联方式</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserAndCompanyMethod1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Pojo.User&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;company.companyId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;company.companyName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserAndCompanyMethod1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserAndCompanyMethod1&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_user left outer join tb_company on company_id = c_id where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-association处理映射关系"><a href="#2-association处理映射关系" class="headerlink" title="2 association处理映射关系"></a>2 association处理映射关系</h2><ul>
<li>association：处理多对一的映射关系</li>
<li>property：需要处理多对的映射关系的属性名</li>
<li>javaType：该属性的类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserAndCompanyMethod2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;company&quot;</span>  <span class="attr">javaType</span>=<span class="string">&quot;Pojo.Company&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;companyId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserAndCompanyMethod2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserAndCompanyMethod2&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_user left outer join tb_company on tb_company.company_id = tb_user.c_id where 				tb_user.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-分步查询"><a href="#3-分步查询" class="headerlink" title="3 分步查询"></a>3 分步查询</h2><h3 id="3-1-查询用户信息"><a href="#3-1-查询用户信息" class="headerlink" title="3.1 查询用户信息"></a>3.1 查询用户信息</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserAndCompanyMethod3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;company&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;Mapper.CompanyMapper.selectByCompanyId&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserAndCompanyMethod3&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserAndCompanyMethod3&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-查询公司信息"><a href="#3-2-查询公司信息" class="headerlink" title="3.2 查询公司信息"></a>3.2 查询公司信息</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;companyMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Pojo.Company&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;companyId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCompanyId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;companyMap&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_company where company_id = #&#123;compamy_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h1><h2 id="1-collection处理映射关系"><a href="#1-collection处理映射关系" class="headerlink" title="1 collection处理映射关系"></a>1 collection处理映射关系</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;CompanyAndUserMethod1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Pojo.Company&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;companyId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCompanyAndUserMethod1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CompanyAndUserMethod1&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_company left outer join tb_user on company_id = c_id where company_id = #					&#123;companyId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-分步查询"><a href="#2-分步查询" class="headerlink" title="2 分步查询"></a>2 分步查询</h2><h3 id="2-1-查询公司"><a href="#2-1-查询公司" class="headerlink" title="2.1 查询公司"></a>2.1 查询公司</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;CompanyAndUserMethod2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Pojo.Company&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;companyId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;userList&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;Mapper.UserMapper.selectByCId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;company_id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCompanyAndUserMethod2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CompanyAndUserMethod2&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_company where company_id = #&#123;companyId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-查询用户"><a href="#2-2-查询用户" class="headerlink" title="2.2 查询用户"></a>2.2 查询用户</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_user where c_id = #&#123;Cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul>
<li>if标签中通过test属性对传来的数据表达式进行判断，如果结果为ture，则标签中的sql语句就会执行；反之便不会执行。</li>
<li>下面就是一个if标签的简单应用。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Pojo.user&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null &quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null and password!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cId!=null&quot;</span>&gt;</span></span><br><span class="line">            and c_id = #&#123;cId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age!=null&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在where后面加上1&#x3D;1恒等式。是为了避免当 if test&#x3D;”id!&#x3D;null”不成立时，后面执行sql语句时就会出出现sql语法错误。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from tb_user where and c_id = ? and age = ?	<span class="comment">&lt;!--where多了一个and语法错误--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from tb_user where 1=1 and c_id = ? and age = ?	<span class="comment">&lt;!--加上后，这样就不会报错--&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul>
<li>where和if一般结合使用：</li>
<li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  </li>
<li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Pojo.user&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null &quot;</span>&gt;</span></span><br><span class="line">            and id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null and password!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;c_id!=null&quot;</span>&gt;</span></span><br><span class="line">            and c_id = #&#123;cId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age!=null &quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>where标签不能去掉条件后多余的and&#x2F;or</p>
</blockquote>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul>
<li><p>trim用于去掉或添加标签中的内容  </p>
</li>
<li><p>常用属性</p>
<ul>
<li>prefix：在trim标签中的内容的前面添加某些内容  </li>
<li>suffix：在trim标签中的内容的后面添加某些内容 </li>
<li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li>
<li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li>
</ul>
</li>
<li><p>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></p>
</li>
</ul>
<h2 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h2><ul>
<li><code>choose</code>相当于<code>switch</code></li>
<li><code>when和otherwise</code>相当于<code>case和default</code></li>
<li>when至少要有一个，otherwise至多只有一个</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Pojo.user&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">                id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                username = #&#123;username&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;password!=null and password !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                password = #&#123;password&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;cId!=null&quot;</span>&gt;</span></span><br><span class="line">                c_id=#&#123;cId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age!=null&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                1=1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul>
<li>属性：  <ul>
<li>collection：设置要循环的数组或集合  </li>
<li>item：表示集合或数组中的每一个数据  </li>
<li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li>
<li>open：设置foreach标签中的内容的开始符  </li>
<li>close：设置foreach标签中的内容的结束符</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreById&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_user(id, username, password, age, c_id) value</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> &gt;</span></span><br><span class="line">        (#&#123;user.id&#125;,#&#123;user.username&#125;,#&#123;user.password&#125;,#&#123;user.age&#125;,#&#123;user.cId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>框架</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mybatisyi</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2022/05/13/Servlet/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>
<p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p>
<span id="more"></span>

<p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p>
<ul>
<li>性能明显更好。</li>
<li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li>
<li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li>
<li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li>
<li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1 导入依赖"></a>1 导入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一定要加上<scope>标签，并且设置为provided。因为在tomcat中，已经内置了该依赖包。如果在生成war包中添加jar，会和tomcat中的jar包发生冲突。</p>
</blockquote>
<h2 id="2-实现Servlet接口"><a href="#2-实现Servlet接口" class="headerlink" title="2 实现Servlet接口"></a>2 实现Servlet接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tk.wian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-配置访问路径"><a href="#3-配置访问路径" class="headerlink" title="3 配置访问路径"></a>3 配置访问路径</h2><p>只需在类的上面使用@WebServlet注解即可，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span>     <span class="comment">//访问路径必须在前面加上斜杠</span></span><br></pre></td></tr></table></figure>



<h2 id="4-访问"><a href="#4-访问" class="headerlink" title="4 访问"></a>4 访问</h2><p>打开浏览器输入对应的url。如上面的url为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/select-demo/demo1</span><br></pre></td></tr></table></figure>

<ul>
<li>localhost:8080：本地8080端口。tomcat默认端口</li>
<li>select-demo：模块名</li>
<li>demo1：@WebServlet指定的路径</li>
</ul>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>对象的生命周期指一个对象从被创建到被销毁的整个过程。而Servlet的生命周期主要是下面四步：</p>
<ol>
<li><p>加载和实例化</p>
<p>默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</p>
<blockquote>
<p><strong>但是我们可以使用设置WebServlet中的loadOnStarcancan参数，让服务器启动时，便加载和实例化：</strong></p>
<p>@WebServlet(urlPatterns &#x3D; “&#x2F;demo1”,loadOnStartup &#x3D; 1)<br>loadOnstartup的取值有两类情况<br>（1）负整数:第一次访问时创建Servlet对象<br>（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</p>
</blockquote>
</li>
<li><p>初始化</p>
<p>在Servlet实例化之后，容器将调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用<strong>一次</strong>。</p>
</li>
<li><p>请求处理</p>
<p>每次请求Servlet时，Servlet容器都会调用Servlet的ervice()方法对请求进行处理</p>
</li>
<li><p>服务终止</p>
<p>当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收。此方法也只调用<strong>一次</strong>。</p>
</li>
</ol>
<h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><p>我们都是针对Http协议开发项目的。所以有一个类HttpServlet间接实现了Servlet接口，让我们的开发效率进一步提升。</p>
<p>HttpServlet是实现了GenericServlet接口，而GenericServlet接口继承了Serclet接口，所以说HttpServlet间接实现了Servlet接口。</p>
<p>在HttpServlet中提供了很多方法，但是我们主要使用**doPost()<strong>和</strong>doGet()**方法分别处理post请求和get请求。</p>
<h1 id="urlPattern配置"><a href="#urlPattern配置" class="headerlink" title="urlPattern配置"></a>urlPattern配置</h1><h2 id="1-多配置"><a href="#1-多配置" class="headerlink" title="1 多配置"></a>1 多配置</h2><p>一个类可以配置多个访问路径。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlpattern=&#123;&quot;/demo1&quot;,&quot;/dem01&quot;&#125;)</span></span><br></pre></td></tr></table></figure>



<h2 id="2-精准匹配"><a href="#2-精准匹配" class="headerlink" title="2 精准匹配"></a>2 精准匹配</h2><p>给出准确的访问路径，只能通过此路径访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/aaa/bbb&quot;)</span></span><br></pre></td></tr></table></figure>



<h2 id="3-目录匹配"><a href="#3-目录匹配" class="headerlink" title="3 目录匹配"></a>3 目录匹配</h2><p>在该目录下输入任意字符，均可访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@WebServlet(&quot;/demo/*&quot;)</span><br></pre></td></tr></table></figure>

<p>如下所示的url，均能访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/select-demo/demo/aaa</span><br><span class="line">http://localhost:8080/select-demo/demo/bbb</span><br></pre></td></tr></table></figure>



<h2 id="4-拓展名匹配"><a href="#4-拓展名匹配" class="headerlink" title="4 拓展名匹配"></a>4 拓展名匹配</h2><p>只要拓展名符合要求就能够访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;*.ai&quot;)</span></span><br></pre></td></tr></table></figure>

<p>如下所示的url，均能访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/select-demo/aaa.ai</span></span><br><span class="line">http:<span class="comment">//localhost:8080/select-demo/bbb.ai</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>拓展名配置时。WebServlet中不能加上斜杠，否则会报错</p>
</blockquote>
<h2 id="5-任意匹配"><a href="#5-任意匹配" class="headerlink" title="5 任意匹配"></a>5 任意匹配</h2><p>输入任何url均能访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/&quot;)</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/*&quot;)</span></span><br></pre></td></tr></table></figure>

<p>如下所示的url，均能访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/select-demo/aaa</span><br><span class="line">http://localhost:8080/select-demo/bbb</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x2F;和&#x2F;*的区别：</p>
<ol>
<li>DefaultServlet是用来处理静态资源，如果配置了”&#x2F;“会把默认的覆盖	掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问</li>
<li>当我们的项目中的Servlet配置了 “&#x2F;“,会覆盖掉tomcat中的DefaultServlet,当其他的url-pattern都匹配不上时都会走这个Servlet</li>
</ol>
</blockquote>
<h2 id="访问优先级"><a href="#访问优先级" class="headerlink" title="访问优先级"></a>访问优先级</h2><p>遵循小范围优先。即：</p>
<p><em><em>精确匹配 &gt; 目录匹配&gt; 扩展名匹配 &gt; &#x2F;</em> &gt; &#x2F;</em>*</p>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Request和Response</title>
    <url>/2022/05/13/Request%E5%92%8CResponse/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li><p>Request是请求对象，Response是响应对象。</p>
</li>
<li><p>request:获取请求数据</p>
<ul>
<li><p>浏览器会发送HTTP请求到后台服务器[Tomcat]</p>
</li>
<li><p>HTTP的请求中会包含很多请求数据[请求行+请求头+请求体]</p>
<span id="more"></span>
</li>
<li><p>后台服务器[Tomcat]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中</p>
</li>
<li><p>所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数</p>
</li>
<li><p>获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务</p>
</li>
</ul>
</li>
<li><p>response:设置响应数据</p>
<ul>
<li>业务处理完后，后台就需要给前端返回业务处理的结果即响应数据</li>
</ul>
<ul>
<li>把响应数据封装到response对象中</li>
<li>后台服务器[Tomcat]会解析response对象,按照[响应行+响应头+响应体]格式拼接结果</li>
<li>浏览器最终解析结果，把内容展示在浏览器给用户浏览</li>
</ul>
</li>
</ul>
<h1 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h1><h2 id="1-获取请求数据"><a href="#1-获取请求数据" class="headerlink" title="1 获取请求数据"></a>1 获取请求数据</h2><h3 id="1-1-获取请求行数据"><a href="#1-1-获取请求行数据" class="headerlink" title="1.1 获取请求行数据"></a>1.1 获取请求行数据</h3><p>请求行的数据包含三部分，分别为<strong>请求方法</strong>，<strong>请求资源路径</strong>和H<strong>TTP协议及版本</strong></p>
<ul>
<li><p>获取请求方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getMethod</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取访问路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getContextPath</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取URL(统一资源定位符)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer <span class="title function_">getRequestURL</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取URI(统一资源标识符)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getRequestURI</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取请求参数(直射用于Get请求)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getQueryString</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-2-获取请求体数据"><a href="#1-2-获取请求体数据" class="headerlink" title="1.2 获取请求体数据"></a>1.2 获取请求体数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getHeader</span><span class="params">(String name)</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-获取请求体数据-Post"><a href="#1-3-获取请求体数据-Post" class="headerlink" title="1.3 获取请求体数据(Post)"></a>1.3 获取请求体数据(Post)</h3><p>因为Get请求方式中没有请求体，所以此方式只适用于Post请求方式</p>
<ul>
<li><p>方法一：字节输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletInputStream <span class="title function_">getInputStream</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：字符输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader <span class="title function_">getReader</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-获取请求数据通用方法"><a href="#1-4-获取请求数据通用方法" class="headerlink" title="1.4 获取请求数据通用方法"></a>1.4 获取请求数据通用方法</h3><ul>
<li>获取所有参数Map集合</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; getParameterMap()</span><br></pre></td></tr></table></figure>

<ul>
<li>根据名称获取参数值（数组）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] getParameterValues(String name)</span><br></pre></td></tr></table></figure>

<ul>
<li>根据名称获取参数值(单个值)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String getParameter(String name)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Map集合中的范形为String和Sting数组</p>
</blockquote>
<h2 id="2-中文乱码问题"><a href="#2-中文乱码问题" class="headerlink" title="2 中文乱码问题"></a>2 中文乱码问题</h2><h3 id="2-1-Post方式"><a href="#2-1-Post方式" class="headerlink" title="2.1 Post方式"></a>2.1 Post方式</h3><ul>
<li>出现中文乱码的原因：<ul>
<li>POST的请求参数是通过request的getReader()来获取流中的数据</li>
<li>TOMCAT在获取流的时候采用的编码是ISO-8859-1</li>
<li>ISO-8859-1编码是不支持中文的，所以会出现乱码</li>
</ul>
</li>
<li>解决方案：<ul>
<li>页面设置的编码格式为UTF-8</li>
<li>把TOMCAT在获取流数据之前的编码设置为UTF-8</li>
<li>通过<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code>设置编码,UTF-8也可以写成小写.</li>
</ul>
</li>
</ul>
<h3 id="2-2-Get方式-通用方法"><a href="#2-2-Get方式-通用方法" class="headerlink" title="2.2 Get方式(通用方法)"></a>2.2 Get方式(通用方法)</h3><ul>
<li><p>出现中文乱码的原因：</p>
<ul>
<li>浏览器把中文参数按照<code>UTF-8</code>进行URL编码</li>
<li>Tomcat对获取到的内容进行了<code>ISO-8859-1</code>的URL解码</li>
</ul>
</li>
<li><p>解决方案：</p>
<ul>
<li><p>按照ISO-8859-1编码获取乱码<code>å¼ ä¸</code>对应的字节数组</p>
</li>
<li><p>按照UTF-8编码获取字节数组对应的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = 数据.getBytes(StandardCharsets.ISO_8859_1);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, StandardCharsets.UTF_8);</span><br><span class="line"><span class="comment">//合并为</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(数据.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="3-请求转发"><a href="#3-请求转发" class="headerlink" title="3 请求转发"></a>3 请求转发</h2><ul>
<li><p>请求转发(forward):一种在服务器内部的资源跳转方式。</p>
<ol>
<li>浏览器发送请求给服务器，服务器中对应的资源A接收到请求</li>
<li>资源A处理完请求后将请求发给资源B</li>
<li>资源B处理完后将结果响应给浏览器</li>
<li>请求从资源A到资源B的过程就叫请求转发</li>
</ol>
</li>
<li><p>实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getRequestDispatcher(<span class="string">&quot;资源B路径&quot;</span>).forward(req,resp);</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h1><h2 id="1-设置相应数据"><a href="#1-设置相应数据" class="headerlink" title="1 设置相应数据"></a>1 设置相应数据</h2><p>HTTP响应数据总共分为三部分内容，分别是<strong>响应行</strong>、<strong>响应头</strong>、<strong>响应体</strong>。</p>
<ol>
<li><p>响应行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>

<p>HTTP&#x2F;1.1：HTTP协议及版本号</p>
<p>200：响应状态码</p>
<p>OK：状态码的描述</p>
<ul>
<li>常用的方法就是设置状态码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(<span class="type">int</span> sc)</span>;</span><br></pre></td></tr></table></figure>


</li>
<li><p>响应头</p>
<ul>
<li>设置响应头键值对</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String name,String value)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>响应体</p>
<ul>
<li>通过字符、字节输出流的方式往浏览器写，</li>
<li>方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符流</span></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//字节流</span></span><br><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-请求重定向"><a href="#2-请求重定向" class="headerlink" title="2 请求重定向"></a>2 请求重定向</h2><ul>
<li><p>简介：</p>
<ol>
<li><p>浏览器发送请求给服务器，服务器中对应的资源A接收到请求</p>
</li>
<li><p>资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径</p>
</li>
<li><p>浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B</p>
</li>
<li><p>资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫重定向</p>
</li>
</ol>
</li>
<li><p>实现方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一步：设置状态码</span></span><br><span class="line">resp.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//第二部：提供重定向地址</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;资源B的访问路径&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化方法，无需设置状态码</span></span><br><span class="line">resposne.sendRedirect(<span class="string">&quot;资源B访问路径&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点：</p>
<ol>
<li><p>浏览器地址栏路径发送变化</p>
<p>当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化</p>
</li>
<li><p>可以重定向到任何位置的资源(服务内容、外部均可)</p>
<p>因为第一次响应结果中包含了浏览器下次要跳转的路径，所以这个路径是可以任意位置资源。</p>
</li>
<li><p>两次请求，不能在多个资源使用request共享数据</p>
<p>因为浏览器发送了两次请求，是两个不同的request对象，就无法通过request对象进行共享数据</p>
</li>
</ol>
</li>
</ul>
<h2 id="3-发送相应数据"><a href="#3-发送相应数据" class="headerlink" title="3 发送相应数据"></a>3 发送相应数据</h2><h3 id="3-1-字符数据"><a href="#3-1-字符数据" class="headerlink" title="3.1 字符数据"></a>3.1 字符数据</h3><p>通过Response对象获取字符输出流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br></pre></td></tr></table></figure>

<h3 id="3-2-字节数据"><a href="#3-2-字节数据" class="headerlink" title="3.2 字节数据"></a>3.2 字节数据</h3><p>通过Response对象获取字节输出流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于html标签，得告诉六浏览器返回的数据类型为html。浏览器才能解析html标签。</p>
<p>response.setHeader(“content-type”,”text&#x2F;html”);</p>
</blockquote>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>会话跟踪技术</title>
    <url>/2022/05/15/%E4%BC%9A%E8%AF%9D%E8%BF%BD%E8%B8%AA%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li><p>会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应。</p>
</li>
<li><p>跟踪：判断数据是来自于同一次会话</p>
</li>
<li><p>会话跟踪:一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p>
</li>
</ul>
 <span id="more"></span>

<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。</p>
<h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h2><h3 id="2-1-发送Cookie"><a href="#2-1-发送Cookie" class="headerlink" title="2.1 发送Cookie"></a>2.1 发送Cookie</h3><ul>
<li><p>创建Cookie对象，并设置数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送Cookie对象到客户端，使用<strong>response</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-获取Cookie"><a href="#2-2-获取Cookie" class="headerlink" title="2.2 获取Cookie"></a>2.2 获取Cookie</h3><ul>
<li><p>获取客户端所有的Cookie，使用<strong>request</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookie(); </span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历数组，获取每一个Cookie对象。并且使用Cookie对象的方法，获取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getname();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getvalue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果需要指定Cookie数据，可以添加一个if条件进行判断</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getname();</span><br><span class="line">    <span class="keyword">if</span> (name.equles(<span class="string">&quot;指定Cookie数据的名字&quot;</span>))&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-Cookie存活时间"><a href="#3-Cookie存活时间" class="headerlink" title="3 Cookie存活时间"></a>3 Cookie存活时间</h2><ul>
<li><p>默认情况下，Cookie存储在浏览器内存中。当浏览器关闭后，内存就会被释放，Cookie就会被释放。</p>
</li>
<li><p>Cookie提供了一个API，用来设置Cookie的存活时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setMaxAge(<span class="type">int</span> seconds);  <span class="comment">//seconds的单位为分钟。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参数值：</p>
<ul>
<li>正数：将Cookie写入浏览器所在电脑硬盘中，持久化存储。到期自动删除。</li>
<li>负数：默认值，Cookie存储在当前浏览器中，当浏览器关闭，Cookie数据就会被销毁。</li>
<li>零：立刻删除对应的Cookie。</li>
</ul>
</li>
</ul>
<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1 概念"></a>1 概念</h2><p>服务端会话跟踪技术：将数据保存到服务端。</p>
<blockquote>
<p>Seesion是基于Cookie实现的</p>
</blockquote>
<h2 id="2-基本使用-1"><a href="#2-基本使用-1" class="headerlink" title="2 基本使用"></a>2 基本使用</h2><ul>
<li><p>获取Session对象，使用的也是<strong>request</strong>对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Session对象提供了以下几个常用的API (和response有点类似)：</p>
<ul>
<li><p>存储数据到session域中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, object O)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据key值，获取值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">object <span class="title function_">getAttribute</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据key值，删除键值对：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="3-Session的钝化和活化"><a href="#3-Session的钝化和活化" class="headerlink" title="3 Session的钝化和活化"></a>3 Session的钝化和活化</h2><ul>
<li>钝化：在服务器关闭后，Tomcat会自动将Sessin数据写入硬盘的文件中。</li>
<li>活化：再次启动服务器后，Tomcat会自动从文件中将Session数据加载到Session中。</li>
</ul>
<h2 id="4-Session的注销"><a href="#4-Session的注销" class="headerlink" title="4 Session的注销"></a>4 Session的注销</h2><h2 id="1自动销毁："><a href="#1自动销毁：" class="headerlink" title="1自动销毁："></a>1自动销毁：</h2><ul>
<li><p>默认情况下，无操作，30分钟自动销毁。</p>
</li>
<li><p>可以通过修改配置就行设置自动销毁的时间。</p>
<p>在项目的web.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 100就是设置后的时间，单位为分钟--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>100<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-API销毁"><a href="#2-API销毁" class="headerlink" title="2 API销毁"></a>2 API销毁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h1><ul>
<li>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端</li>
<li>安全性：Cookie不安全，Session安全</li>
<li>数据大小：Cookie最大3KB，Session无大小限制</li>
<li>存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟</li>
<li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li>
</ul>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>会话跟踪</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter—过滤器</title>
    <url>/2022/05/15/Filter/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Filter 表示过滤器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一。过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。</p>
<p>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="1-实现Filter接口"><a href="#1-实现Filter接口" class="headerlink" title="1 实现Filter接口"></a>1 实现Filter接口</h2><span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> </span><br></pre></td></tr></table></figure>

<h2 id="2-重写接口中的方法"><a href="#2-重写接口中的方法" class="headerlink" title="2 重写接口中的方法"></a>2 重写接口中的方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-配置拦截路径"><a href="#3-配置拦截路径" class="headerlink" title="3 配置拦截路径"></a>3 配置拦截路径</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Filter拦截路径配置"><a href="#Filter拦截路径配置" class="headerlink" title="Filter拦截路径配置"></a>Filter拦截路径配置</h1><p>和Servlet基本一致。</p>
<h2 id="1拦截具体的资源"><a href="#1拦截具体的资源" class="headerlink" title="1拦截具体的资源"></a>1拦截具体的资源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/idnex.jsp&quot;)</span></span><br></pre></td></tr></table></figure>

<p>只有访问index.jsp时就会被拦截</p>
<h2 id="2-目录拦截"><a href="#2-目录拦截" class="headerlink" title="2 目录拦截"></a>2 目录拦截</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/user/*&quot;)</span></span><br></pre></td></tr></table></figure>

<p>访问&#x2F;user下的所有资源，都会被拦截</p>
<h2 id="3-后缀名拦截"><a href="#3-后缀名拦截" class="headerlink" title="3 后缀名拦截"></a>3 后缀名拦截</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;*jsp&quot;)</span></span><br></pre></td></tr></table></figure>

<p>访问后缀名为jsp的资源，都会被拦截</p>
<blockquote>
<p>和Servlet一样也不能加上斜杠</p>
</blockquote>
<h2 id="4-拦截所有"><a href="#4-拦截所有" class="headerlink" title="4 拦截所有"></a>4 拦截所有</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/&quot;)</span></span><br></pre></td></tr></table></figure>

<p>访问所有资源，都会被拦截</p>
<h1 id="过滤链"><a href="#过滤链" class="headerlink" title="过滤链"></a>过滤链</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>过滤器链是指在一个Web应用，可以配置多个过滤器，这多个过滤器称为过滤器链。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/Filter/Filter.png"></p>
<p>上图中的过滤器链执行是按照以下流程执行：</p>
<ol>
<li>执行 <code>Filter1</code> 的放行前逻辑代码</li>
<li>执行 <code>Filter1</code> 的放行代码</li>
<li>执行 <code>Filter2</code> 的放行前逻辑代码</li>
<li>执行 <code>Filter2</code> 的放行代码</li>
<li>访问到资源</li>
<li>执行 <code>Filter2</code> 的放行后逻辑代码</li>
<li>执行 <code>Filter1</code> 的放行后逻辑代码</li>
</ol>
<p>以上流程串起来就像一条链子，故称之为过滤器链。</p>
<h2 id="2-执行顺序"><a href="#2-执行顺序" class="headerlink" title="2 执行顺序"></a>2 执行顺序</h2><p>我们现在使用的是注解配置Filter，而这种配置方式的优先级是按照过滤器类名(字符串)的自然排序。</p>
<p>比如有如下两个名称的过滤器 ： <code>BFilterDemo</code> 和 <code>AFilterDemo</code> 。那一定是 <code>AFilterDemo</code> 过滤器先执行。</p>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Filter</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础</title>
    <url>/2022/05/24/Spring%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="xml配置开发"><a href="#xml配置开发" class="headerlink" title="xml配置开发"></a>xml配置开发</h1><h2 id="1-bean的基本配置"><a href="#1-bean的基本配置" class="headerlink" title="1 bean的基本配置"></a>1 bean的基本配置</h2><h3 id="1-1-id与class"><a href="#1-1-id与class" class="headerlink" title="1.1 id与class"></a>1.1 id与class</h3><p>id与class时基本配置中的基本</p>
<ul>
<li>格式</li>
</ul>
<span id="more"></span>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>属性</p>
<ul>
<li>id：使用容器时可以通过id值获取到对应的bean，一个容器中id值唯一</li>
<li>class：配置的bean的全路径类名</li>
</ul>
</li>
<li><p>示例</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;selectbao&quot;</span> <span class="attr">class</span> = <span class="string">&quot;dao.imp.selectDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-名字name"><a href="#1-2-名字name" class="headerlink" title="1.2 名字name"></a>1.2 名字name</h3><p>就是为bean定义别名，可以定义多个。使用空格、逗号或分号隔开</p>
<ul>
<li>格式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">naem</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;selectbao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;one two three&quot;</span> <span class="attr">class</span> = <span class="string">&quot;dao.imp.selectDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-作用范围scope"><a href="#1-3-作用范围scope" class="headerlink" title="1.3 作用范围scope"></a>1.3 作用范围scope</h3><ul>
<li>格式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">naem</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/ <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可选项<ul>
<li>singleton：单例(默认值)</li>
<li>prototype：非单例</li>
</ul>
</li>
<li>实例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">naem</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/ <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>单例</p>
<p>单例的意思是在Spring的IOC容器中只会有该类的一个对象，避免了对象的频繁创建与销毁，达到了bean对象的复用，性能高</p>
</li>
</ul>
<h2 id="2-bean实例化"><a href="#2-bean实例化" class="headerlink" title="2 bean实例化"></a>2 bean实例化</h2><h3 id="2-1-构造方法实例化"><a href="#2-1-构造方法实例化" class="headerlink" title="2.1 构造方法实例化"></a>2.1 构造方法实例化</h3><p>通过无参构造方法实例化。也是最为简单和现在最为常用的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Impl</span> <span class="keyword">implements</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Impl.dao1Impl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-静态工厂实例化"><a href="#2-2-静态工厂实例化" class="headerlink" title="2.2 静态工厂实例化"></a>2.2 静态工厂实例化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Impl</span> <span class="keyword">implements</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工厂java，用一个工厂java，用一个静态方法返回一个dao1Impl对象。这是早些时间常用的方法。方法返回一个dao1Impl对象。这是早些时间常用的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> dao1Impl <span class="title function_">getDao1Impl</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">dao1Impl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao1Factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getDao1Impl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>class:工厂类的类全名</p>
</li>
<li><p>factory-mehod:具体工厂类中创建对象的方法名</p>
</li>
</ul>
<h3 id="2-3-非静态工厂实例化"><a href="#2-3-非静态工厂实例化" class="headerlink" title="2.3 非静态工厂实例化"></a>2.3 非静态工厂实例化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Impl</span> <span class="keyword">implements</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工厂java，用一个<strong>非静态</strong>方法返回一个dao1Impl对象。这是早些时间常用的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> dao1Impl <span class="title function_">getDao1Impl</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">dao1Impl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1Factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao1Factory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;dao1Factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getDao1Impl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-FactoryBean"><a href="#2-4-FactoryBean" class="headerlink" title="2.4 FactoryBean"></a>2.4 FactoryBean</h3><p>实例工厂实例化的方式就已经介绍完了，配置的过程还是比较复杂，所以Spring为了简化这种配置方式就提供了一种叫<code>FactoryBean</code>的方式来简化开发。</p>
<p>下面这一部分还是不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Impl</span> <span class="keyword">implements</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在工厂文件中就有所变化了，要实现实现FactoryBean接口，重写接口的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Factory</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> dao1Impl <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">dao1Impl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> dao1Impl.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao1Factory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>接口FactoryBean中有三个方法。分别是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一:getObject()，被重写后，在方法中进行对象的创建并返回</p>
</li>
<li><p>方法二:getObjectType(),被重写后，主要返回的是被创建类的Class对象</p>
</li>
<li><p>方法三:没有被重写，因为它已经给了默认值，从方法名中可以看出其作用是设置对象是否为单例，默认true。</p>
</li>
</ul>
<h2 id="3-bean的生命周期"><a href="#3-bean的生命周期" class="headerlink" title="3 bean的生命周期"></a>3 bean的生命周期</h2><p>bean对象从创建到销毁的整体过程</p>
<p>我们在bean对象对应的类中分别添加两个方法，<strong>方法名任意</strong></p>
<p>在配置文件中添加对应的属性参数名为对应的方法名，标签如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">init-method			#初始化方法</span><br><span class="line">destroy-method		#销毁方法</span><br></pre></td></tr></table></figure>



<p>例子如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.dao1Impl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建实例化工厂对象,对应的是第一行配置</p>
</li>
<li><p>调用对象中的方法来创建bean，对应的是第二行配置</p>
<ul>
<li>factory-bean:工厂的实例对象</li>
</ul>
</li>
<li><p>factory-method:工厂对象中的具体创建对象的方法名</p>
</li>
</ul>
<h2 id="4-依赖注入"><a href="#4-依赖注入" class="headerlink" title="4 依赖注入"></a>4 依赖注入</h2><h3 id="4-1-setter注入"><a href="#4-1-setter注入" class="headerlink" title="4.1 setter注入"></a>4.1 setter注入</h3><p>通过set方法作为接口，向bean中注入数据。所以在bean对应的类中就一定要有对应的set方法</p>
<h4 id="4-1-1-引用数据"><a href="#4-1-1-引用数据" class="headerlink" title="4.1.1 引用数据"></a>4.1.1 引用数据</h4><p>引用数据就是在Spring中也配置了的对象。</p>
<p>如下，就是注入配置文件中的其他bean。配置配置文件中的bean得用<strong>ref</strong>标签。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Impl</span> <span class="keyword">implements</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao2Impl</span> <span class="keyword">implements</span> <span class="title class_">dao2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> dao1Impl dao1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDao1</span><span class="params">(dao1Impl dao1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dao1 = dao1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        dao1.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Impl.dao1Impl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Impl.dao2Impl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-数组"><a href="#4-1-2-数组" class="headerlink" title="4.1.2 数组"></a>4.1.2 数组</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-1-3-LIst"><a href="#4-1-3-LIst" class="headerlink" title="4.1.3 LIst"></a>4.1.3 LIst</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-1-4-Set"><a href="#4-1-4-Set" class="headerlink" title="4.1.4 Set"></a>4.1.4 Set</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-1-5-Map"><a href="#4-1-5-Map" class="headerlink" title="4.1.5 Map"></a>4.1.5 Map</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;键1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;键3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;键3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-1-6-Properties"><a href="#4-1-6-Properties" class="headerlink" title="4.1.6 Properties"></a>4.1.6 Properties</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;键1&quot;</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;键2&quot;</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;键3&quot;</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-构造器注入"><a href="#4-2-构造器注入" class="headerlink" title="4.2 构造器注入"></a>4.2 构造器注入</h3><p>与setter注入类似，不过接口换为带参构造函数。参数就是被注入的数据。</p>
<h4 id="4-2-1-引用数据"><a href="#4-2-1-引用数据" class="headerlink" title="4.2.1 引用数据"></a>4.2.1 引用数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao1Impl</span> <span class="keyword">implements</span> <span class="title class_">dao1</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dao2Impl</span> <span class="keyword">implements</span> <span class="title class_">dao2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> dao1Impl dao1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">dao2Impl</span><span class="params">(dao1Impl dao1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dao1 = dao1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        dao1.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Impl.dao1Impl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Impl.dao2Impl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-数组-1"><a href="#4-1-2-数组-1" class="headerlink" title="4.1.2 数组"></a>4.1.2 数组</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">arary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-List"><a href="#4-2-3-List" class="headerlink" title="4.2.3 List"></a>4.2.3 List</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-2-4-Set"><a href="#4-2-4-Set" class="headerlink" title="4.2.4 Set"></a>4.2.4 Set</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-2-5-Map"><a href="#4-2-5-Map" class="headerlink" title="4.2.5 Map"></a>4.2.5 Map</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;键1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;键3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;键3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-2-6-Properties"><a href="#4-2-6-Properties" class="headerlink" title="4.2.6 Properties"></a>4.2.6 Properties</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;键1&quot;</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;键2&quot;</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;键3&quot;</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-自动装配"><a href="#5-自动装配" class="headerlink" title="5 自动装配"></a>5 自动装配</h2><p>自动装配就是IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean。</p>
<p><strong>常用方式：</strong></p>
<ul>
<li>按类型(bytype)（<strong>常用</strong>）</li>
<li>按名称(byname)</li>
<li>按构造方法</li>
<li>不启用自动装配</li>
</ul>
<p><strong>使用方法：</strong></p>
<p>相当于替换了property，用智能的方式自动填入</p>
<p>使用autowire属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bean id=<span class="string">&quot;dao1&quot;</span> class=<span class="string">&quot;dao.Impl.dao1Impl&quot;</span> autowire=<span class="string">&quot;byName&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>



<p><strong>注意事项:</strong></p>
<ul>
<li>需要注入属性的类中对应属性的setter方法不能省略</li>
<li>被注入的对象必须要被Spring的IOC容器管理</li>
<li>按照类型在Spring的IOC容器中如果找到多个对象，会报<code>NoUniqueBeanDefinitionException</code></li>
</ul>
<ul>
<li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li>
<li>使用按类型装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用</li>
<li>使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</li>
<li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li>
</ul>
<h2 id="6-配置管理第三方bean"><a href="#6-配置管理第三方bean" class="headerlink" title="6 配置管理第三方bean"></a>6 配置管理第三方bean</h2><p><strong>例子：</strong>实现Druid管理</p>
<h3 id="6-1-导入druid依赖"><a href="#6-1-导入druid依赖" class="headerlink" title="6.1 导入druid依赖"></a>6.1 导入druid依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6-2-配置第三方bean"><a href="#6-2-配置第三方bean" class="headerlink" title="6.2 配置第三方bean"></a>6.2 配置第三方bean</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druid&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>driverClassName:数据库驱动</li>
<li>url:数据库连接地址</li>
<li>username:数据库连接用户名</li>
<li>password:数据库连接密码</li>
<li>数据库连接的四要素要和自己使用的数据库信息一致。</li>
</ul>
<blockquote>
<p>不同第三方bean，在配置bean时。属性名可能不一样，但在idea中均有提示。</p>
</blockquote>
<blockquote>
<p>是通过setter注入的相关属性，所以在bean配置中使用了property</p>
</blockquote>
<h2 id="7-加载Properties文件"><a href="#7-加载Properties文件" class="headerlink" title="7 加载Properties文件"></a>7 加载Properties文件</h2><h3 id="7-1-开启context命名空间"><a href="#7-1-开启context命名空间" class="headerlink" title="7.1 开启context命名空间"></a>7.1 开启context命名空间</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-加载properties文件"><a href="#7-2-加载properties文件" class="headerlink" title="7.2 加载properties文件"></a>7.2 加载properties文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;文件名&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>syetem-properties-mode&#x3D;”NEVER”是为了解决<code>&lt;context:property-placeholder/&gt;</code>标签会加载系统的环境变量，而且环境变量的值会被优先加载的问题。</li>
</ol>
</blockquote>
<h3 id="7-3-获取数据"><a href="#7-3-获取数据" class="headerlink" title="7.3 获取数据"></a>7.3 获取数据</h3><p>使用EL表达式获取properties文件中的数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$&#123;key&#125;</span><br></pre></td></tr></table></figure>



<h3 id="注意：location配置"><a href="#注意：location配置" class="headerlink" title="注意：location配置"></a>注意：location配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式三 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式四--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>方式一:可以实现，如果配置文件多的话，每个都需要配置</li>
<li>方式二:<code>*.properties</code>代表所有以properties结尾的文件都会被加载，可以解决方式一的问题，但是不标准</li>
<li>方式三:标准的写法，<code>classpath:</code>代表的是从根路径下开始查找，但是只能查询当前项目的根路径</li>
<li>方式四:不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的properties配置文件</li>
</ul>
<h2 id="8-核心容器"><a href="#8-核心容器" class="headerlink" title="8 核心容器"></a>8 核心容器</h2><h3 id="8-1-容器的创建方法"><a href="#8-1-容器的创建方法" class="headerlink" title="8.1 容器的创建方法"></a>8.1 容器的创建方法</h3><ol>
<li><p>方式一：ApplicationContext创建。通过配置文件名称创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二：通过FileSystemXmlApplicationContext创建。通过文件的绝对路径进行创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\code\\spring\\src\\main\\resources\\applicationContext.xml&quot;</span>); </span><br></pre></td></tr></table></figure>

<blockquote>
<p>这种方式虽能实现，但是当项目的位置发生变化后,代码也需要跟着改,耦合度较高,不推荐使用。</p>
</blockquote>
</li>
</ol>
<h3 id="8-2-Bean的三种获取方法"><a href="#8-2-Bean的三种获取方法" class="headerlink" title="8.2 Bean的三种获取方法"></a>8.2 Bean的三种获取方法</h3><ol>
<li><p>通过bean的id获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">dao1Impl</span> <span class="variable">dao1</span> <span class="operator">=</span> (dao1Impl) app.getBean(<span class="string">&quot;dao1&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过类型获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">dao1Impl</span> <span class="variable">dao1</span> <span class="operator">=</span> (dao1Impl) app.getBean(dao1Impl.class);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="8-2-BeanFactory"><a href="#8-2-BeanFactory" class="headerlink" title="8.2 BeanFactory"></a>8.2 BeanFactory</h3><p>使用BeanFactory来创建IOC容器的具体实现方式为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resources);</span><br><span class="line">        <span class="type">dao1Impl</span> <span class="variable">dao1</span> <span class="operator">=</span> bf.getBean(<span class="string">&quot;dao1&quot;</span>);</span><br><span class="line">        dao1.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BeanFactory与ApplicationContext的区别</p>
<ul>
<li><p>BeanFactory是延迟加载，只有在获取bean对象的时候才会去创建</p>
</li>
<li><p>ApplicationContext是立即加载，容器加载的时候就会创建bean对象</p>
</li>
<li><p>ApplicationContext要想成为延迟加载，只需要按照如下方式进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;.dao.impl.dao1Impl&quot;</span>  <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><h2 id="1-获取容器"><a href="#1-获取容器" class="headerlink" title="1 获取容器"></a>1 获取容器</h2><h3 id="1-1-创建配置类"><a href="#1-1-创建配置类" class="headerlink" title="1.1 创建配置类"></a>1.1 创建配置类</h3><p>在配置类上添加<code>@Configuration</code>注解，将其标识为一个配置类,替换<code>applicationContext.xml</code></p>
<p>在配置类上添加包扫描注解<code>@ComponentScan</code>，用于扫描对应的java包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;service&quot;,&quot;dao&quot;,&quot;web&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>小结</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>@Configuration</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置该类为spring配置类</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：定义bean的id</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>名称</th>
<th>@ComponentScan</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：扫描路径，此路径可以逐层向下扫描</td>
</tr>
</tbody></table>
<h3 id="1-2-加载容器"><a href="#1-2-加载容器" class="headerlink" title="1.2 加载容器"></a>1.2 加载容器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);`</span><br></pre></td></tr></table></figure>



<h2 id="2-Bean配置"><a href="#2-Bean配置" class="headerlink" title="2 Bean配置"></a>2 Bean配置</h2><h3 id="2-1-Bean注明"><a href="#2-1-Bean注明" class="headerlink" title="2.1 Bean注明"></a>2.1 Bean注明</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@Component&#x2F;@Controller&#x2F;@Service&#x2F;@Repository</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置该类为spring管理的bean</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：定义bean的id</td>
</tr>
</tbody></table>
<ul>
<li>@Component：任何地方都能使用</li>
<li>@Controller：用于web层</li>
<li>@Service：用于服务层</li>
<li>@Repository：用于dao层</li>
</ul>
<h3 id="2-2-Bean作用范围"><a href="#2-2-Bean作用范围" class="headerlink" title="2.2 Bean作用范围"></a>2.2 Bean作用范围</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@Scope</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置该类创建对象的作用范围<br/>可用于设置创建出的bean是否为单例对象</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：定义bean作用范围，<br/>&#x3D;&#x3D;默认值singleton（单例），可选值prototype（非单例）&#x3D;&#x3D;</td>
</tr>
</tbody></table>
<h3 id="2-3-Bean生命周期"><a href="#2-3-Bean生命周期" class="headerlink" title="2.3 Bean生命周期"></a>2.3 Bean生命周期</h3><p><strong>@PostConstruct</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>@PostConstruct</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>方法注解</td>
</tr>
<tr>
<td>位置</td>
<td>方法上</td>
</tr>
<tr>
<td>作用</td>
<td>设置该方法为初始化方法</td>
</tr>
<tr>
<td>属性</td>
<td>无</td>
</tr>
</tbody></table>
<p><strong>@PreDestroy</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>@PreDestroy</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>方法注解</td>
</tr>
<tr>
<td>位置</td>
<td>方法上</td>
</tr>
<tr>
<td>作用</td>
<td>设置该方法为销毁方法</td>
</tr>
<tr>
<td>属性</td>
<td>无</td>
</tr>
</tbody></table>
<h2 id="3-依赖注入"><a href="#3-依赖注入" class="headerlink" title="3 依赖注入"></a>3 依赖注入</h2><p>无论什么数据注入都<strong>可以不用写setter方法</strong></p>
<h3 id="3-1-引用类型注入"><a href="#3-1-引用类型注入" class="headerlink" title="3.1 引用类型注入"></a>3.1 引用类型注入</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@Autowired</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>属性注解  或  方法注解（了解）  或  方法形参注解（了解）</td>
</tr>
<tr>
<td>位置</td>
<td>属性定义上方  或  标准set方法上方  或  类set方法上方  或  方法形参前面</td>
</tr>
<tr>
<td>作用</td>
<td>为引用类型属性设置值</td>
</tr>
<tr>
<td>属性</td>
<td>required：true&#x2F;false，定义该属性是否允许为null</td>
</tr>
</tbody></table>
<p>@Autowired是按照类型注入，那么对应到dao1接口如果有多个实现类，就会报错。这时我们就只能加上@Qualifier按名称注入</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>@Qualifier</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>属性注解  或  方法注解（了解）</td>
</tr>
<tr>
<td>位置</td>
<td>属性定义上方  或  标准set方法上方  或  类set方法上方</td>
</tr>
<tr>
<td>作用</td>
<td>为引用类型属性指定注入的beanId</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：设置注入的beanId</td>
</tr>
</tbody></table>
<blockquote>
<p>@Qualifier不能独立使用，必须和@Autowired一起使用</p>
</blockquote>
<h3 id="3-2-普通数据注入"><a href="#3-2-普通数据注入" class="headerlink" title="3.2 普通数据注入"></a>3.2 普通数据注入</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>属性注解  或  方法注解（了解）</td>
</tr>
<tr>
<td>位置</td>
<td>属性定义上方  或  标准set方法上方  或  类set方法上方</td>
</tr>
<tr>
<td>作用</td>
<td>为  基本数据类型  或  字符串类型  属性设置值</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：要注入的属性值</td>
</tr>
</tbody></table>
<h3 id="3-3-Properties注入"><a href="#3-3-Properties注入" class="headerlink" title="3.3 Properties注入"></a>3.3 Properties注入</h3><ol>
<li><p>注解加载properties配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;dao&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>名称</th>
<th>@PropertySource</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td><strong>类定义上方</strong></td>
</tr>
<tr>
<td>作用</td>
<td>加载properties文件中的属性值</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：设置加载的properties文件对应的文件名或文件名组成的数组</td>
</tr>
</tbody></table>
</li>
<li><p>使用@Value和EL表达式读取配置文件中的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Value(&quot;$&#123;name&#125;&quot;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4-管理第三方bean"><a href="#4-管理第三方bean" class="headerlink" title="4 管理第三方bean"></a>4 管理第三方bean</h2><h3 id="4-1-配置类中添加"><a href="#4-1-配置类中添加" class="headerlink" title="4.1 配置类中添加"></a>4.1 配置类中添加</h3><p>在配置类中添加一个方法，该方法的返回值就是要创建的Bean对象类型。并用@Bean注明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>名称</th>
<th>@Bean</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>方法注解</td>
</tr>
<tr>
<td>位置</td>
<td>方法定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置该方法的返回值作为spring管理的bean</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：定义bean的id</td>
</tr>
</tbody></table>
<h3 id="4-2-引入外部外部配置类"><a href="#4-2-引入外部外部配置类" class="headerlink" title="4.2 引入外部外部配置类"></a>4.2 引入外部外部配置类</h3><h4 id="4-2-1-使用包扫描"><a href="#4-2-1-使用包扫描" class="headerlink" title="4.2.1 使用包扫描"></a>4.2.1 使用包扫描</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将jdbConfig类要放入config包中</p>
</blockquote>
<h4 id="4-2-2-Import引入"><a href="#4-2-2-Import引入" class="headerlink" title="4.2.2 @Import引入"></a>4.2.2 <code>@Import</code>引入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Import参数需要的是一个数组，可以引入多个配置类。</li>
<li>@Import注解在配置类中只能写一次</li>
<li>@Import注解引入的是类的类型</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>@Import</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>导入配置类</td>
</tr>
<tr>
<td>属性</td>
<td>value（默认）：定义导入的配置类类名，<br/>当配置类有多个时使用数组格式一次性导入多个配置类</td>
</tr>
</tbody></table>
<h1 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h1><table>
<thead>
<tr>
<th>功能</th>
<th>xml配置</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td>定义bean</td>
<td>bean标签<br/>     id属性<br />     class属性</td>
<td>@Component<br />     @Controller<br />     @Service<br />     @Repository<br />@ComponentScan</td>
</tr>
<tr>
<td>设置依赖注入</td>
<td>setter输入(set方法)<br />构造器注入(构造方法)<br />自动装配</td>
<td>@Autowired<br />      @Qualifier<br />@Value</td>
</tr>
<tr>
<td>配置第三方bean</td>
<td>bean标签<br />     静态工厂<br />     实例工厂<br />     FactoryBean</td>
<td>@Bean</td>
</tr>
<tr>
<td>作用范围</td>
<td>scope属性</td>
<td>@Scope</td>
</tr>
<tr>
<td>生命周期</td>
<td>标准接口 <br />     init-method<br />     destroy-method</td>
<td>@PostConstructor<br />@PreDestroy</td>
</tr>
</tbody></table>
<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SSM</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2022/05/25/JDBC/</url>
    <content><![CDATA[<h1 id="JDBC本质"><a href="#JDBC本质" class="headerlink" title="JDBC本质"></a>JDBC本质</h1><ul>
<li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li>
<li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li>
<li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</li>
</ul>
<span id="more"></span>



<h1 id="JDBC使用"><a href="#JDBC使用" class="headerlink" title="JDBC使用"></a>JDBC使用</h1><h2 id="六个步骤"><a href="#六个步骤" class="headerlink" title="六个步骤"></a>六个步骤</h2><ul>
<li>注册驱动(可省略)</li>
<li>获取连接</li>
<li>获取操作对象</li>
<li>执行sql</li>
<li>处理查询操作集</li>
<li>关闭资源</li>
</ul>
<h2 id="详细例子"><a href="#详细例子" class="headerlink" title="详细例子"></a>详细例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        1.注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">com</span>.mysql.jdbc.Driver());</span><br><span class="line"><span class="comment">//        2.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;88888888&quot;</span>);</span><br><span class="line"><span class="comment">//        3.获取操作对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">//        4.执行sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">re</span> <span class="operator">=</span> stat.executeQuery(sql);</span><br><span class="line"><span class="comment">//        5.处理查询集</span></span><br><span class="line">        <span class="keyword">while</span>(re.next())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> re.getInt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> re.getString(<span class="number">2</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;:&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6.释放资源</span></span><br><span class="line">        re.close();</span><br><span class="line">        stat.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="1-注册驱动"><a href="#1-注册驱动" class="headerlink" title="1 注册驱动"></a>1 注册驱动</h2><p>注册驱动主要有两种方式</p>
<ul>
<li>方法1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">com</span>.mysql.jdbc.Driver());</span><br></pre></td></tr></table></figure>

<ul>
<li>方法2</li>
</ul>
<p>通过反射进行注册，这也是现在常用的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="2-获取连接"><a href="#2-获取连接" class="headerlink" title="2 获取连接"></a>2 获取连接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;88888888&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>调用DriverManager的getConnection方法，其参数为：</p>
<ul>
<li>url：数据库链接</li>
<li>username：数据库用户名</li>
<li>password：数据库密码</li>
</ul>
<h2 id="3-获取操作对象"><a href="#3-获取操作对象" class="headerlink" title="3 获取操作对象"></a>3 获取操作对象</h2><p>Statement不能防止sql注入，所以很少使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure>



<h2 id="4-执行sql语句"><a href="#4-执行sql语句" class="headerlink" title="4 执行sql语句"></a>4 执行sql语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">re</span> <span class="operator">=</span> stat.executeQuery(sql);</span><br></pre></td></tr></table></figure>

<p>Statement下有两个方法：</p>
<ul>
<li><p>int executeUpdate(String sql)：</p>
<p>该方法用于执行DML语句，即增删改。返回的值为被影响的行数。</p>
</li>
<li><p>ResultSet executeQuery(String sql)：</p>
<p>该方法用于执行DQL语句，即查询语句。返回了ResultSet。</p>
</li>
</ul>
<h2 id="5-处理查询集"><a href="#5-处理查询集" class="headerlink" title="5 处理查询集"></a>5 处理查询集</h2><p>当我们执行的语句是DQL语句时，就会返回一个ResultSet。在这其中就包含了我们查询的数据。</p>
<p>从ResultSet中获取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ResultSet</span> <span class="variable">re</span> <span class="operator">=</span> stat.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(re.next())&#123;</span><br><span class="line">	<span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> re.getInt(<span class="number">1</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> re.getString(<span class="number">2</span>);</span><br><span class="line">	System.out.println(id + <span class="string">&quot;:&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>boolean next()方法：</p>
<p>返回下一存储位置是否有数据。有就返回true，没有就返回false。</p>
</li>
<li><p>int getInt(String str)，int getInt (int i):</p>
<p>返回对应数据库中表对应列或字段的数据。str就是字段名。i就是字段顺序，从1开始。</p>
<p>如果获取的是String数据类型。则为String getString(String str)，String getString(int i)。以此类推。</p>
</li>
</ul>
<h2 id="6-释放资源"><a href="#6-释放资源" class="headerlink" title="6 释放资源"></a>6 释放资源</h2><p>如果执行了DQL语句，那么就要释放ResultSet。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">re.close;</span><br><span class="line">statm.close;</span><br><span class="line">conn.close;</span><br></pre></td></tr></table></figure>



<h1 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h1><p>通过Statement对象执行sql语句时，可能会存在sql注入问题，会存在一定的安全隐患。所以后来产生了PreparedStatement对象，可以有效的解决sql注入问题。</p>
<h2 id="1-获取方式"><a href="#1-获取方式" class="headerlink" title="1 获取方式"></a>1 获取方式</h2><p>与Statement一样，但是在获取时，就得写入sql语句。并且使用占位符” ? “。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where id = ? and name = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br></pre></td></tr></table></figure>

<h2 id="2-注入数据"><a href="#2-注入数据" class="headerlink" title="2 注入数据"></a>2 注入数据</h2><p>sql语句是不完整的，需要用数据去替换掉对应的” ? “。</p>
<p>PreparedStatement提供了相应的方法：</p>
<p>void setInt(int i，int x):</p>
<ul>
<li>i是第几个占位符。</li>
<li>x是注入的数据。</li>
</ul>
<p>如果需注入String类型数据，则为void setString(int i，String str)。以此类推。</p>
<h2 id="3-执行sql"><a href="#3-执行sql" class="headerlink" title="3 执行sql"></a>3 执行sql</h2><ul>
<li><p>DML语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">executeUpdate</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DQL语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResoultSet <span class="title function_">executeQuery</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>以上两个方法都不需要任何参数。</p>
</blockquote>
<h2 id="4-与Statement对比"><a href="#4-与Statement对比" class="headerlink" title="4 与Statement对比"></a>4 与Statement对比</h2><ol>
<li>Statement存在Sql注入问题，preparedStatement解决了Sql注入问题</li>
<li>Statement是编译一次执行一次，preparedStatement是编译一次，可以执行多次。preparedStatement执行效率更高</li>
<li>preparedStatement会在编译阶段做类型的安全检查</li>
</ol>
<h1 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h1><p>事务对应的方法全在Connection中。</p>
<ol>
<li><p>开启事务。</p>
<p>在JDBC中，事务是默认开启的，但是是自动提交。我们可以通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void setAutoCommit（Boolean b）</span><br></pre></td></tr></table></figure>

<p>关闭其自动提交。</p>
<ul>
<li>ture：开启自动提交（默认）</li>
<li>false：关闭自动提交</li>
</ul>
</li>
<li><p>提交事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void commit()</span><br></pre></td></tr></table></figure>
</li>
<li><p>回滚事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">viod rollbac()</span><br></pre></td></tr></table></figure></li>
</ol>
<p>下面是一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">state</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;88888888&quot;</span>);</span><br><span class="line"><span class="comment">//        关闭自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            state = conn.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update tb_user set money = 1000 where id = 1&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update tb_user set money = 1000 where id = 2&quot;</span>;</span><br><span class="line">            state.executeUpdate(sql1);</span><br><span class="line">            state.executeUpdate(sql2);</span><br><span class="line"><span class="comment">//            一切正常，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//            出现异常，回滚事务</span></span><br><span class="line">            conn.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//            无论提交与否，最后都需要是释放资源</span></span><br><span class="line">            state.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<hr>
<center><b>如果有什么，可以通过下面的邮箱和我联系！！！</b></center>

<p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>数据库</category>
        <category>JDBC</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-1</title>
    <url>/2022/10/22/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-1/</url>
    <content><![CDATA[<h1 id="1-创建多线程"><a href="#1-创建多线程" class="headerlink" title="1 创建多线程"></a>1 创建多线程</h1><p>创建多线程一共有两种方式。一个是继承Thread类，另一个是实现Runable接口。其原理是一样的，本质上都是实现了Runable接口。因为Thread类就是实现了Runable接口。</p>
<span id="more"></span>

<h2 id="1-实现Runable接口"><a href="#1-实现Runable接口" class="headerlink" title="1 实现Runable接口"></a>1 实现Runable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">thread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//线程中将要执行操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-继承Thread类"><a href="#2-继承Thread类" class="headerlink" title="2 继承Thread类"></a>2 继承Thread类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">thread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//线程中将要执行操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-启动线程"><a href="#2-启动线程" class="headerlink" title="2 启动线程"></a>2 启动线程</h1><p>看下面，分别为两种不同创建线程方式的启动方法。可以看出在主方法中，最好都用了start方法启动了该线程。但是线程对象的创建方式却不同，Runable接口的是向Thread中注入了参数也就是下面的类t，而Thread类却直接创建了对象t。这是因为，Thread类已经实现了Runable接口，其实本质都是实现了Runable接口。</p>
<p>为啥线程开启不是用run方法，而是start方法呢？这是因为，run方法其实就是一个定义在Runab接口的普通方法，如果直接调用run方法，就不能直接开启线程，直接在main方法的主线程中执行。start方法其本质是调用了底层start0方法来开启线程。</p>
<h2 id="1-Runable"><a href="#1-Runable" class="headerlink" title="1 Runable"></a>1 Runable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">t</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">t</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">t</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//线程执行的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Thread"><a href="#2-Thread" class="headerlink" title="2 Thread"></a>2 Thread</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">t</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">t</span>();</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">t</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//线程执行的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-小案例"><a href="#3-小案例" class="headerlink" title="3 小案例"></a>3 小案例</h1><p>在银行中存放了10000元。有三个人分别取出里面的钱，一次取五百直到取完为止。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">t</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">t</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">t</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (money &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            money = money-<span class="number">500</span>;</span><br><span class="line">            <span class="comment">//Thread.currentThread().getName()获取当前线程的名字</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;取走500还剩&quot;</span> + money );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在运行的结果中，我们看到有些顺序反了，按理说不应该出现啊。而且还出现了，银行余额为负数，这不应该啊。其实这就是线程不安全，多个线程同时访问一个资源造成的。在后面我们会解决他的。</p>
<p><a href="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/java%E5%A4%9A%E7%BA%BF%E7%A8%8B1/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B.jpg"><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/java%E5%A4%9A%E7%BA%BF%E7%A8%8B1/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B.jpg" alt="img"></a></p>
<h1 id="4-线程常用方法"><a href="#4-线程常用方法" class="headerlink" title="4 线程常用方法"></a>4 线程常用方法</h1><h2 id="1-线程名字"><a href="#1-线程名字" class="headerlink" title="1 线程名字"></a>1 线程名字</h2><p>主线程的名字为main，后面的线程命为Thread-0，Thread-1…..</p>
<p>获取线程名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置线程名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        setNativeName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-线程优先级"><a href="#2-线程优先级" class="headerlink" title="2 线程优先级"></a>2 线程优先级</h2><p>线程的默认优先级为5，最高为10，最低为1。</p>
<p><a href="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/java%E5%A4%9A%E7%BA%BF%E7%A8%8B1/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7.jpg"><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/java%E5%A4%9A%E7%BA%BF%E7%A8%8B1/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7.jpg" alt="img"></a></p>
<p>获取当前优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">int</span> newPriority)</span> &#123;</span><br><span class="line">    ThreadGroup g;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((g = getThreadGroup()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">            newPriority = g.getMaxPriority();</span><br><span class="line">        &#125;</span><br><span class="line">        setPriority0(priority = newPriority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h2><h3 id="sleep-long-n"><a href="#sleep-long-n" class="headerlink" title="sleep(long n)"></a>sleep(long n)</h3><p>让线程休眠，单位为毫秒</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis, <span class="type">int</span> nanos)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                <span class="string">&quot;nanosecond timeout value out of range&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nanos &gt;= <span class="number">500000</span> || (nanos != <span class="number">0</span> &amp;&amp; millis == <span class="number">0</span>)) &#123;</span><br><span class="line">        millis++;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(millis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>让当前线程立刻执行，直到执行完毕才能执行其他线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    join(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h3><p>让出当前线程的cpu，当时不一定让出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">yield</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h1 id="5-守护线程"><a href="#5-守护线程" class="headerlink" title="5 守护线程"></a>5 守护线程</h1><p>守护线程是指为其他线程服务的线程。在JVM中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。因此JVM退出时，不必关心守护线程是否已结束。最经典的就是java的垃圾回收线程。</p>
<p>设置守护线程一定得在开起线程之前。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure>

<h1 id="6-线程的六种状态"><a href="#6-线程的六种状态" class="headerlink" title="6 线程的六种状态"></a>6 线程的六种状态</h1><table>
<thead>
<tr>
<th>状态</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>NEW</td>
<td>尚未启动的线程状态，即线程创建，还未调用start方法</td>
</tr>
<tr>
<td>RUNNABLE</td>
<td>就绪状态（调用start，等待调度）+正在运行</td>
</tr>
<tr>
<td>WAITING</td>
<td>等待状态的线程正在等待另一线程执行特定的操作（如notify）</td>
</tr>
<tr>
<td>TIME_WAITING</td>
<td>具有指定等待时间的等待状态</td>
</tr>
<tr>
<td>BLOCKED</td>
<td>等待监视器锁时，陷入阻塞状态</td>
</tr>
<tr>
<td>TERMINATED</td>
<td>线程完成执行，终止状态</td>
</tr>
</tbody></table>
<p>下面为图示</p>
<p><a href="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/java%E5%A4%9A%E7%BA%BF%E7%A8%8B1/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png"><img data-src="https://cdn.jsdelivr.net/gh/WianAn/imageBed/post/java%E5%A4%9A%E7%BA%BF%E7%A8%8B1/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png" alt="img"></a></p>
<p>其中RUNABLE状态又分为就绪状态和运行状态，所有有的书本上说线程有七种状态。</p>
<p>线程的主要路径为new—-&gt;runnable—&gt;terminated；而其他的三个状态都是在围绕着runnable。</p>
<h1 id="7-synchronized"><a href="#7-synchronized" class="headerlink" title="7 synchronized"></a>7 synchronized</h1><p>线程同步机制是一套用于协调线程间的数据访问及活动的机制，该机制用于保障线程安全以及实现这些线程的共同目标</p>
<p>synchronized便常用于线程同步。有两种用法</p>
<h2 id="修饰部分代码"><a href="#修饰部分代码" class="headerlink" title="修饰部分代码"></a>修饰部分代码</h2><p>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (object o) &#123;</span><br><span class="line">    <span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修饰一个方法"><a href="#修饰一个方法" class="headerlink" title="修饰一个方法"></a>修饰一个方法</h2><ul>
<li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象；</li>
<li>修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>无论synchronized关键字加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象；如果synchronized作用的对象是一个静态方法或一个类，则它取得的锁是对类，该类所有的对象同一把锁。</li>
<li>每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。</li>
<li>实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制</li>
</ul>
<h1 id="8-案例完善"><a href="#8-案例完善" class="headerlink" title="8 案例完善"></a>8 案例完善</h1><p>只需要要上把锁就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">t</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">t</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(thread1.getState());</span><br><span class="line">        System.out.println(thread2.getState());</span><br><span class="line">        System.out.println(thread3.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">t</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            <span class="keyword">while</span> (money &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                money = money - <span class="number">500</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//Thread.currentThread().getName()获取当前线程的名字</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;取走500还剩&quot;</span> + money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>如果有什么，可以通过下面的邮箱和我联系！！！</strong></p>
<p><a href="https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=VCM9NTo1OhQlJXo3Ozk"><img data-src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_02.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>数据库</category>
        <category>JDBC</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
</search>
